
File src/main.c:

[1] [START OF FILE]

File C:\Vircon32\Vircon32\OceanStorm\dev\include\video.h:

[57] Keyword: int
[57] Identifier: make_gray
[57] Delimiter: '('
[57] Keyword: int
[57] Identifier: brightness
[57] Delimiter: ')'
[58] Delimiter: '{'
[59] Keyword: return
[59] Literal int: -16777216
[59] Operator: |
[59] Delimiter: '('
[59] Identifier: brightness
[59] Operator: <<
[59] Literal int: 16
[59] Delimiter: ')'
[59] Operator: |
[59] Delimiter: '('
[59] Identifier: brightness
[59] Operator: <<
[59] Literal int: 8
[59] Delimiter: ')'
[59] Operator: |
[59] Identifier: brightness
[59] Special symbol: ';'
[60] Delimiter: '}'
[66] Keyword: int
[66] Identifier: make_color_rgb
[66] Delimiter: '('
[66] Keyword: int
[66] Identifier: r
[66] Special symbol: ','
[66] Keyword: int
[66] Identifier: g
[66] Special symbol: ','
[66] Keyword: int
[66] Identifier: b
[66] Delimiter: ')'
[67] Delimiter: '{'
[68] Keyword: return
[68] Literal int: -16777216
[68] Operator: |
[68] Delimiter: '('
[68] Identifier: b
[68] Operator: <<
[68] Literal int: 16
[68] Delimiter: ')'
[68] Operator: |
[68] Delimiter: '('
[68] Identifier: g
[68] Operator: <<
[68] Literal int: 8
[68] Delimiter: ')'
[68] Operator: |
[68] Identifier: r
[68] Special symbol: ';'
[69] Delimiter: '}'
[74] Keyword: int
[74] Identifier: make_color_rgba
[74] Delimiter: '('
[74] Keyword: int
[74] Identifier: r
[74] Special symbol: ','
[74] Keyword: int
[74] Identifier: g
[74] Special symbol: ','
[74] Keyword: int
[74] Identifier: b
[74] Special symbol: ','
[74] Keyword: int
[74] Identifier: a
[74] Delimiter: ')'
[75] Delimiter: '{'
[76] Keyword: return
[76] Delimiter: '('
[76] Identifier: a
[76] Operator: <<
[76] Literal int: 24
[76] Delimiter: ')'
[76] Operator: |
[76] Delimiter: '('
[76] Identifier: b
[76] Operator: <<
[76] Literal int: 16
[76] Delimiter: ')'
[76] Operator: |
[76] Delimiter: '('
[76] Identifier: g
[76] Operator: <<
[76] Literal int: 8
[76] Delimiter: ')'
[76] Operator: |
[76] Identifier: r
[76] Special symbol: ';'
[77] Delimiter: '}'
[82] Keyword: int
[82] Identifier: get_color_red
[82] Delimiter: '('
[82] Keyword: int
[82] Identifier: color
[82] Delimiter: ')'
[83] Delimiter: '{'
[84] Keyword: return
[84] Identifier: color
[84] Operator: &
[84] Literal int: 255
[84] Special symbol: ';'
[85] Delimiter: '}'
[88] Keyword: int
[88] Identifier: get_color_green
[88] Delimiter: '('
[88] Keyword: int
[88] Identifier: color
[88] Delimiter: ')'
[89] Delimiter: '{'
[90] Keyword: return
[90] Delimiter: '('
[90] Identifier: color
[90] Operator: >>
[90] Literal int: 8
[90] Delimiter: ')'
[90] Operator: &
[90] Literal int: 255
[90] Special symbol: ';'
[91] Delimiter: '}'
[95] Keyword: int
[95] Identifier: get_color_blue
[95] Delimiter: '('
[95] Keyword: int
[95] Identifier: color
[95] Delimiter: ')'
[96] Delimiter: '{'
[97] Keyword: return
[97] Delimiter: '('
[97] Identifier: color
[97] Operator: >>
[97] Literal int: 16
[97] Delimiter: ')'
[97] Operator: &
[97] Literal int: 255
[97] Special symbol: ';'
[98] Delimiter: '}'
[102] Keyword: int
[102] Identifier: get_color_alpha
[102] Delimiter: '('
[102] Keyword: int
[102] Identifier: color
[102] Delimiter: ')'
[103] Delimiter: '{'
[104] Keyword: return
[104] Delimiter: '('
[104] Identifier: color
[104] Operator: >>
[104] Literal int: 24
[104] Delimiter: ')'
[104] Operator: &
[104] Literal int: 255
[104] Special symbol: ';'
[105] Delimiter: '}'
[115] Keyword: void
[115] Identifier: select_texture
[115] Delimiter: '('
[115] Keyword: int
[115] Identifier: texture_id
[115] Delimiter: ')'
[116] Delimiter: '{'
[117] Keyword: asm
[118] Delimiter: '{'
[119] Literal string: "mov R0, {texture_id}"
[120] Literal string: "out GPU_SelectedTexture, R0"
[121] Delimiter: '}'
[122] Delimiter: '}'
[126] Keyword: int
[126] Identifier: get_selected_texture
[126] Delimiter: '('
[126] Delimiter: ')'
[127] Delimiter: '{'
[128] Keyword: asm
[129] Delimiter: '{'
[130] Literal string: "in R0, GPU_SelectedTexture"
[131] Delimiter: '}'
[132] Delimiter: '}'
[137] Keyword: void
[137] Identifier: select_region
[137] Delimiter: '('
[137] Keyword: int
[137] Identifier: region_id
[137] Delimiter: ')'
[138] Delimiter: '{'
[139] Keyword: asm
[140] Delimiter: '{'
[141] Literal string: "mov R0, {region_id}"
[142] Literal string: "out GPU_SelectedRegion, R0"
[143] Delimiter: '}'
[144] Delimiter: '}'
[148] Keyword: int
[148] Identifier: get_selected_region
[148] Delimiter: '('
[148] Delimiter: ')'
[149] Delimiter: '{'
[150] Keyword: asm
[151] Delimiter: '{'
[152] Literal string: "in R0, GPU_SelectedRegion"
[153] Delimiter: '}'
[154] Delimiter: '}'
[163] Keyword: void
[163] Identifier: define_region
[163] Delimiter: '('
[163] Keyword: int
[163] Identifier: min_x
[163] Special symbol: ','
[163] Keyword: int
[163] Identifier: min_y
[163] Special symbol: ','
[163] Keyword: int
[163] Identifier: max_x
[163] Special symbol: ','
[163] Keyword: int
[163] Identifier: max_y
[163] Special symbol: ','
[163] Keyword: int
[163] Identifier: hotspot_x
[163] Special symbol: ','
[163] Keyword: int
[163] Identifier: hotspot_y
[163] Delimiter: ')'
[164] Delimiter: '{'
[165] Keyword: asm
[166] Delimiter: '{'
[167] Literal string: "mov R0, {min_x}"
[168] Literal string: "out GPU_RegionMinX, R0"
[169] Literal string: "mov R0, {min_y}"
[170] Literal string: "out GPU_RegionMinY, R0"
[171] Literal string: "mov R0, {max_x}"
[172] Literal string: "out GPU_RegionMaxX, R0"
[173] Literal string: "mov R0, {max_y}"
[174] Literal string: "out GPU_RegionMaxY, R0"
[175] Literal string: "mov R0, {hotspot_x}"
[176] Literal string: "out GPU_RegionHotSpotX, R0"
[177] Literal string: "mov R0, {hotspot_y}"
[178] Literal string: "out GPU_RegionHotSpotY, R0"
[179] Delimiter: '}'
[180] Delimiter: '}'
[186] Keyword: void
[186] Identifier: define_region_topleft
[186] Delimiter: '('
[186] Keyword: int
[186] Identifier: min_x
[186] Special symbol: ','
[186] Keyword: int
[186] Identifier: min_y
[186] Special symbol: ','
[186] Keyword: int
[186] Identifier: max_x
[186] Special symbol: ','
[186] Keyword: int
[186] Identifier: max_y
[186] Delimiter: ')'
[187] Delimiter: '{'
[188] Keyword: asm
[189] Delimiter: '{'
[190] Literal string: "mov R0, {min_x}"
[191] Literal string: "out GPU_RegionMinX, R0"
[192] Literal string: "out GPU_RegionHotSpotX, R0"
[193] Literal string: "mov R0, {min_y}"
[194] Literal string: "out GPU_RegionMinY, R0"
[195] Literal string: "out GPU_RegionHotSpotY, R0"
[196] Literal string: "mov R0, {max_x}"
[197] Literal string: "out GPU_RegionMaxX, R0"
[198] Literal string: "mov R0, {max_y}"
[199] Literal string: "out GPU_RegionMaxY, R0"
[200] Delimiter: '}'
[201] Delimiter: '}'
[207] Keyword: void
[207] Identifier: define_region_center
[207] Delimiter: '('
[207] Keyword: int
[207] Identifier: min_x
[207] Special symbol: ','
[207] Keyword: int
[207] Identifier: min_y
[207] Special symbol: ','
[207] Keyword: int
[207] Identifier: max_x
[207] Special symbol: ','
[207] Keyword: int
[207] Identifier: max_y
[207] Delimiter: ')'
[208] Delimiter: '{'
[209] Keyword: int
[209] Identifier: center_x
[209] Operator: =
[209] Delimiter: '('
[209] Identifier: min_x
[209] Operator: +
[209] Identifier: max_x
[209] Delimiter: ')'
[209] Operator: /
[209] Literal int: 2
[209] Special symbol: ';'
[210] Keyword: int
[210] Identifier: center_y
[210] Operator: =
[210] Delimiter: '('
[210] Identifier: min_y
[210] Operator: +
[210] Identifier: max_y
[210] Delimiter: ')'
[210] Operator: /
[210] Literal int: 2
[210] Special symbol: ';'
[212] Keyword: asm
[213] Delimiter: '{'
[214] Literal string: "mov R0, {min_x}"
[215] Literal string: "out GPU_RegionMinX, R0"
[216] Literal string: "mov R0, {min_y}"
[217] Literal string: "out GPU_RegionMinY, R0"
[218] Literal string: "mov R0, {max_x}"
[219] Literal string: "out GPU_RegionMaxX, R0"
[220] Literal string: "mov R0, {max_y}"
[221] Literal string: "out GPU_RegionMaxY, R0"
[222] Literal string: "mov R0, {center_x}"
[223] Literal string: "out GPU_RegionHotSpotX, R0"
[224] Literal string: "mov R0, {center_y}"
[225] Literal string: "out GPU_RegionHotSpotY, R0"
[226] Delimiter: '}'
[227] Delimiter: '}'
[237] Keyword: void
[237] Identifier: define_region_matrix
[238] Delimiter: '('
[239] Keyword: int
[239] Identifier: first_id
[239] Special symbol: ','
[240] Keyword: int
[240] Identifier: first_min_x
[240] Special symbol: ','
[240] Keyword: int
[240] Identifier: first_min_y
[240] Special symbol: ','
[241] Keyword: int
[241] Identifier: first_max_x
[241] Special symbol: ','
[241] Keyword: int
[241] Identifier: first_max_y
[241] Special symbol: ','
[242] Keyword: int
[242] Identifier: first_hotspot_x
[242] Special symbol: ','
[242] Keyword: int
[242] Identifier: first_hotspot_y
[242] Special symbol: ','
[243] Keyword: int
[243] Identifier: elements_x
[243] Special symbol: ','
[243] Keyword: int
[243] Identifier: elements_y
[243] Special symbol: ','
[244] Keyword: int
[244] Identifier: gap
[245] Delimiter: ')'
[246] Delimiter: '{'
[248] Keyword: int
[248] Identifier: current_id
[248] Operator: =
[248] Identifier: first_id
[248] Special symbol: ';'
[249] Keyword: int
[249] Identifier: min_x
[249] Operator: =
[249] Identifier: first_min_x
[249] Special symbol: ';'
[250] Keyword: int
[250] Identifier: min_y
[250] Operator: =
[250] Identifier: first_min_y
[250] Special symbol: ';'
[251] Keyword: int
[251] Identifier: max_x
[251] Operator: =
[251] Identifier: first_max_x
[251] Special symbol: ';'
[252] Keyword: int
[252] Identifier: max_y
[252] Operator: =
[252] Identifier: first_max_y
[252] Special symbol: ';'
[253] Keyword: int
[253] Identifier: hotspot_x
[253] Operator: =
[253] Identifier: first_hotspot_x
[253] Special symbol: ';'
[254] Keyword: int
[254] Identifier: hotspot_y
[254] Operator: =
[254] Identifier: first_hotspot_y
[254] Special symbol: ';'
[257] Keyword: int
[257] Identifier: advance_x
[257] Operator: =
[257] Delimiter: '('
[257] Identifier: max_x
[257] Operator: -
[257] Identifier: min_x
[257] Operator: +
[257] Literal int: 1
[257] Delimiter: ')'
[257] Operator: +
[257] Identifier: gap
[257] Special symbol: ';'
[258] Keyword: int
[258] Identifier: advance_y
[258] Operator: =
[258] Delimiter: '('
[258] Identifier: max_y
[258] Operator: -
[258] Identifier: min_y
[258] Operator: +
[258] Literal int: 1
[258] Delimiter: ')'
[258] Operator: +
[258] Identifier: gap
[258] Special symbol: ';'
[261] Keyword: for
[261] Delimiter: '('
[261] Keyword: int
[261] Identifier: matrix_y
[261] Operator: =
[261] Literal int: 0
[261] Special symbol: ';'
[261] Identifier: matrix_y
[261] Operator: <
[261] Identifier: elements_y
[261] Special symbol: ';'
[261] Operator: ++
[261] Identifier: matrix_y
[261] Delimiter: ')'
[262] Delimiter: '{'
[263] Keyword: for
[263] Delimiter: '('
[263] Keyword: int
[263] Identifier: matrix_x
[263] Operator: =
[263] Literal int: 0
[263] Special symbol: ';'
[263] Identifier: matrix_x
[263] Operator: <
[263] Identifier: elements_x
[263] Special symbol: ';'
[263] Operator: ++
[263] Identifier: matrix_x
[263] Delimiter: ')'
[264] Delimiter: '{'
[266] Identifier: select_region
[266] Delimiter: '('
[266] Identifier: current_id
[266] Delimiter: ')'
[266] Special symbol: ';'
[267] Identifier: define_region
[267] Delimiter: '('
[267] Identifier: min_x
[267] Special symbol: ','
[267] Identifier: min_y
[267] Special symbol: ','
[267] Identifier: max_x
[267] Special symbol: ','
[267] Identifier: max_y
[267] Special symbol: ','
[267] Identifier: hotspot_x
[267] Special symbol: ','
[267] Identifier: hotspot_y
[267] Delimiter: ')'
[267] Special symbol: ';'
[268] Identifier: current_id
[268] Operator: ++
[268] Special symbol: ';'
[271] Identifier: min_x
[271] Operator: +=
[271] Identifier: advance_x
[271] Special symbol: ';'
[272] Identifier: max_x
[272] Operator: +=
[272] Identifier: advance_x
[272] Special symbol: ';'
[273] Identifier: hotspot_x
[273] Operator: +=
[273] Identifier: advance_x
[273] Special symbol: ';'
[274] Delimiter: '}'
[277] Identifier: min_y
[277] Operator: +=
[277] Identifier: advance_y
[277] Special symbol: ';'
[278] Identifier: max_y
[278] Operator: +=
[278] Identifier: advance_y
[278] Special symbol: ';'
[279] Identifier: hotspot_y
[279] Operator: +=
[279] Identifier: advance_y
[279] Special symbol: ';'
[282] Identifier: min_x
[282] Operator: =
[282] Identifier: first_min_x
[282] Special symbol: ';'
[283] Identifier: max_x
[283] Operator: =
[283] Identifier: first_max_x
[283] Special symbol: ';'
[284] Identifier: hotspot_x
[284] Operator: =
[284] Identifier: first_hotspot_x
[284] Special symbol: ';'
[285] Delimiter: '}'
[286] Delimiter: '}'
[291] Keyword: void
[291] Identifier: set_region_hotspot
[291] Delimiter: '('
[291] Keyword: int
[291] Identifier: hotspot_x
[291] Special symbol: ','
[291] Keyword: int
[291] Identifier: hotspot_y
[291] Delimiter: ')'
[292] Delimiter: '{'
[293] Keyword: asm
[294] Delimiter: '{'
[295] Literal string: "mov R0, {hotspot_x}"
[296] Literal string: "out GPU_RegionHotSpotX, R0"
[297] Literal string: "mov R0, {hotspot_y}"
[298] Literal string: "out GPU_RegionHotSpotY, R0"
[299] Delimiter: '}'
[300] Delimiter: '}'
[310] Keyword: void
[310] Identifier: set_multiply_color
[310] Delimiter: '('
[310] Keyword: int
[310] Identifier: color
[310] Delimiter: ')'
[311] Delimiter: '{'
[312] Keyword: asm
[313] Delimiter: '{'
[314] Literal string: "mov R0, {color}"
[315] Literal string: "out GPU_MultiplyColor, R0"
[316] Delimiter: '}'
[317] Delimiter: '}'
[323] Keyword: void
[323] Identifier: set_drawing_point
[323] Delimiter: '('
[323] Keyword: int
[323] Identifier: drawing_x
[323] Special symbol: ','
[323] Keyword: int
[323] Identifier: drawing_y
[323] Delimiter: ')'
[324] Delimiter: '{'
[325] Keyword: asm
[326] Delimiter: '{'
[327] Literal string: "mov R0, {drawing_x}"
[328] Literal string: "out GPU_DrawingPointX, R0"
[329] Literal string: "mov R0, {drawing_y}"
[330] Literal string: "out GPU_DrawingPointY, R0"
[331] Delimiter: '}'
[332] Delimiter: '}'
[338] Keyword: void
[338] Identifier: set_drawing_scale
[338] Delimiter: '('
[338] Keyword: float
[338] Identifier: scale_x
[338] Special symbol: ','
[338] Keyword: float
[338] Identifier: scale_y
[338] Delimiter: ')'
[339] Delimiter: '{'
[340] Keyword: asm
[341] Delimiter: '{'
[342] Literal string: "mov R0, {scale_x}"
[343] Literal string: "out GPU_DrawingScaleX, R0"
[344] Literal string: "mov R0, {scale_y}"
[345] Literal string: "out GPU_DrawingScaleY, R0"
[346] Delimiter: '}'
[347] Delimiter: '}'
[354] Keyword: void
[354] Identifier: set_drawing_angle
[354] Delimiter: '('
[354] Keyword: float
[354] Identifier: angle
[354] Delimiter: ')'
[355] Delimiter: '{'
[356] Keyword: asm
[357] Delimiter: '{'
[358] Literal string: "mov R0, {angle}"
[359] Literal string: "out GPU_DrawingAngle, R0"
[360] Delimiter: '}'
[361] Delimiter: '}'
[372] Keyword: void
[372] Identifier: set_blending_mode
[372] Delimiter: '('
[372] Keyword: int
[372] Identifier: mode
[372] Delimiter: ')'
[373] Delimiter: '{'
[374] Keyword: asm
[375] Delimiter: '{'
[376] Literal string: "mov R0, {mode}"
[377] Literal string: "out GPU_ActiveBlending, R0"
[378] Delimiter: '}'
[379] Delimiter: '}'
[387] Keyword: int
[387] Identifier: get_multiply_color
[387] Delimiter: '('
[387] Delimiter: ')'
[388] Delimiter: '{'
[389] Keyword: asm
[390] Delimiter: '{'
[391] Literal string: "in R0, GPU_MultiplyColor"
[392] Delimiter: '}'
[393] Delimiter: '}'
[397] Keyword: void
[397] Identifier: get_drawing_point
[397] Delimiter: '('
[397] Keyword: int
[397] Operator: *
[397] Identifier: drawing_x
[397] Special symbol: ','
[397] Keyword: int
[397] Operator: *
[397] Identifier: drawing_y
[397] Delimiter: ')'
[398] Delimiter: '{'
[399] Keyword: asm
[400] Delimiter: '{'
[401] Literal string: "push R1"
[402] Literal string: "in R0, GPU_DrawingPointX"
[403] Literal string: "mov R1, {drawing_x}"
[404] Literal string: "mov [R1], R0"
[405] Literal string: "in R0, GPU_DrawingPointY"
[406] Literal string: "mov R1, {drawing_y}"
[407] Literal string: "mov [R1], R0"
[408] Delimiter: '}'
[409] Delimiter: '}'
[413] Keyword: void
[413] Identifier: get_drawing_scale
[413] Delimiter: '('
[413] Keyword: float
[413] Operator: *
[413] Identifier: scale_x
[413] Special symbol: ','
[413] Keyword: float
[413] Operator: *
[413] Identifier: scale_y
[413] Delimiter: ')'
[414] Delimiter: '{'
[415] Keyword: asm
[416] Delimiter: '{'
[417] Literal string: "push R1"
[418] Literal string: "in R0, GPU_DrawingScaleX"
[419] Literal string: "mov R1, {scale_x}"
[420] Literal string: "mov [R1], R0"
[421] Literal string: "in R0, GPU_DrawingScaleY"
[422] Literal string: "mov R1, {scale_y}"
[423] Literal string: "mov [R1], R0"
[424] Delimiter: '}'
[425] Delimiter: '}'
[429] Keyword: float
[429] Identifier: get_drawing_angle
[429] Delimiter: '('
[429] Delimiter: ')'
[430] Delimiter: '{'
[431] Keyword: asm
[432] Delimiter: '{'
[433] Literal string: "in R0, GPU_DrawingAngle"
[434] Delimiter: '}'
[435] Delimiter: '}'
[439] Keyword: int
[439] Identifier: get_blending_mode
[439] Delimiter: '('
[439] Delimiter: ')'
[440] Delimiter: '{'
[441] Keyword: asm
[442] Delimiter: '{'
[443] Literal string: "in R0, GPU_ActiveBlending"
[444] Delimiter: '}'
[445] Delimiter: '}'
[453] Keyword: void
[453] Identifier: clear_screen
[453] Delimiter: '('
[453] Keyword: int
[453] Identifier: color
[453] Delimiter: ')'
[454] Delimiter: '{'
[455] Keyword: asm
[456] Delimiter: '{'
[457] Literal string: "mov R0, {color}"
[458] Literal string: "out GPU_ClearColor, R0"
[459] Literal string: "out GPU_Command, GPUCommand_ClearScreen"
[460] Delimiter: '}'
[461] Delimiter: '}'
[467] Keyword: void
[467] Identifier: draw_region
[467] Delimiter: '('
[467] Delimiter: ')'
[468] Delimiter: '{'
[469] Keyword: asm
[470] Delimiter: '{'
[471] Literal string: "out GPU_Command, GPUCommand_DrawRegion"
[472] Delimiter: '}'
[473] Delimiter: '}'
[479] Keyword: void
[479] Identifier: draw_region_at
[479] Delimiter: '('
[479] Keyword: int
[479] Identifier: drawing_x
[479] Special symbol: ','
[479] Keyword: int
[479] Identifier: drawing_y
[479] Delimiter: ')'
[480] Delimiter: '{'
[481] Keyword: asm
[482] Delimiter: '{'
[483] Literal string: "mov R0, {drawing_x}"
[484] Literal string: "out GPU_DrawingPointX, R0"
[485] Literal string: "mov R0, {drawing_y}"
[486] Literal string: "out GPU_DrawingPointY, R0"
[487] Literal string: "out GPU_Command, GPUCommand_DrawRegion"
[488] Delimiter: '}'
[489] Delimiter: '}'
[494] Keyword: void
[494] Identifier: draw_region_zoomed
[494] Delimiter: '('
[494] Delimiter: ')'
[495] Delimiter: '{'
[496] Keyword: asm
[497] Delimiter: '{'
[498] Literal string: "out GPU_Command, GPUCommand_DrawRegionZoomed"
[499] Delimiter: '}'
[500] Delimiter: '}'
[505] Keyword: void
[505] Identifier: draw_region_zoomed_at
[505] Delimiter: '('
[505] Keyword: int
[505] Identifier: drawing_x
[505] Special symbol: ','
[505] Keyword: int
[505] Identifier: drawing_y
[505] Delimiter: ')'
[506] Delimiter: '{'
[507] Keyword: asm
[508] Delimiter: '{'
[509] Literal string: "mov R0, {drawing_x}"
[510] Literal string: "out GPU_DrawingPointX, R0"
[511] Literal string: "mov R0, {drawing_y}"
[512] Literal string: "out GPU_DrawingPointY, R0"
[513] Literal string: "out GPU_Command, GPUCommand_DrawRegionZoomed"
[514] Delimiter: '}'
[515] Delimiter: '}'
[520] Keyword: void
[520] Identifier: draw_region_rotated
[520] Delimiter: '('
[520] Delimiter: ')'
[521] Delimiter: '{'
[522] Keyword: asm
[523] Delimiter: '{'
[524] Literal string: "out GPU_Command, GPUCommand_DrawRegionRotated"
[525] Delimiter: '}'
[526] Delimiter: '}'
[531] Keyword: void
[531] Identifier: draw_region_rotated_at
[531] Delimiter: '('
[531] Keyword: int
[531] Identifier: drawing_x
[531] Special symbol: ','
[531] Keyword: int
[531] Identifier: drawing_y
[531] Delimiter: ')'
[532] Delimiter: '{'
[533] Keyword: asm
[534] Delimiter: '{'
[535] Literal string: "mov R0, {drawing_x}"
[536] Literal string: "out GPU_DrawingPointX, R0"
[537] Literal string: "mov R0, {drawing_y}"
[538] Literal string: "out GPU_DrawingPointY, R0"
[539] Literal string: "out GPU_Command, GPUCommand_DrawRegionRotated"
[540] Delimiter: '}'
[541] Delimiter: '}'
[546] Keyword: void
[546] Identifier: draw_region_rotozoomed
[546] Delimiter: '('
[546] Delimiter: ')'
[547] Delimiter: '{'
[548] Keyword: asm
[549] Delimiter: '{'
[550] Literal string: "out GPU_Command, GPUCommand_DrawRegionRotozoomed"
[551] Delimiter: '}'
[552] Delimiter: '}'
[557] Keyword: void
[557] Identifier: draw_region_rotozoomed_at
[557] Delimiter: '('
[557] Keyword: int
[557] Identifier: drawing_x
[557] Special symbol: ','
[557] Keyword: int
[557] Identifier: drawing_y
[557] Delimiter: ')'
[558] Delimiter: '{'
[559] Keyword: asm
[560] Delimiter: '{'
[561] Literal string: "mov R0, {drawing_x}"
[562] Literal string: "out GPU_DrawingPointX, R0"
[563] Literal string: "mov R0, {drawing_y}"
[564] Literal string: "out GPU_DrawingPointY, R0"
[565] Literal string: "out GPU_Command, GPUCommand_DrawRegionRotozoomed"
[566] Delimiter: '}'
[567] Delimiter: '}'
[585] Keyword: void
[585] Identifier: print_at
[585] Delimiter: '('
[585] Keyword: int
[585] Identifier: drawing_x
[585] Special symbol: ','
[585] Keyword: int
[585] Identifier: drawing_y
[585] Special symbol: ','
[585] Keyword: int
[585] Operator: *
[585] Identifier: text
[585] Delimiter: ')'
[586] Delimiter: '{'
[589] Keyword: int
[589] Identifier: previous_texture
[589] Operator: =
[589] Identifier: get_selected_texture
[589] Delimiter: '('
[589] Delimiter: ')'
[589] Special symbol: ';'
[590] Identifier: select_texture
[590] Delimiter: '('
[590] Operator: -
[590] Literal int: 1
[590] Delimiter: ')'
[590] Special symbol: ';'
[593] Keyword: int
[593] Identifier: initial_drawing_x
[593] Operator: =
[593] Identifier: drawing_x
[593] Special symbol: ';'
[595] Keyword: while
[595] Delimiter: '('
[595] Operator: *
[595] Identifier: text
[595] Delimiter: ')'
[596] Delimiter: '{'
[599] Identifier: select_region
[599] Delimiter: '('
[599] Operator: *
[599] Identifier: text
[599] Delimiter: ')'
[599] Special symbol: ';'
[600] Identifier: draw_region_at
[600] Delimiter: '('
[600] Identifier: drawing_x
[600] Special symbol: ','
[600] Identifier: drawing_y
[600] Delimiter: ')'
[600] Special symbol: ';'
[603] Identifier: drawing_x
[603] Operator: +=
[603] Literal int: 10
[603] Special symbol: ';'
[606] Keyword: if
[606] Delimiter: '('
[606] Operator: *
[606] Identifier: text
[606] Operator: ==
[606] Literal int: 10
[606] Delimiter: ')'
[607] Delimiter: '{'
[609] Identifier: drawing_x
[609] Operator: =
[609] Identifier: initial_drawing_x
[609] Special symbol: ';'
[610] Identifier: drawing_y
[610] Operator: +=
[610] Literal int: 20
[610] Special symbol: ';'
[611] Delimiter: '}'
[614] Operator: ++
[614] Identifier: text
[614] Special symbol: ';'
[615] Delimiter: '}'
[618] Identifier: select_texture
[618] Delimiter: '('
[618] Identifier: previous_texture
[618] Delimiter: ')'
[618] Special symbol: ';'
[619] Delimiter: '}'
[624] Keyword: void
[624] Identifier: print
[624] Delimiter: '('
[624] Keyword: int
[624] Operator: *
[624] Identifier: text
[624] Delimiter: ')'
[625] Delimiter: '{'
[626] Keyword: int
[626] Identifier: drawing_x
[626] Special symbol: ','
[626] Identifier: drawing_y
[626] Special symbol: ';'
[627] Identifier: get_drawing_point
[627] Delimiter: '('
[627] Operator: &
[627] Identifier: drawing_x
[627] Special symbol: ','
[627] Operator: &
[627] Identifier: drawing_y
[627] Delimiter: ')'
[627] Special symbol: ';'
[629] Identifier: print_at
[629] Delimiter: '('
[629] Identifier: drawing_x
[629] Special symbol: ','
[629] Identifier: drawing_y
[629] Special symbol: ','
[629] Identifier: text
[629] Delimiter: ')'
[629] Special symbol: ';'
[630] Delimiter: '}'

File C:\Vircon32\Vircon32\OceanStorm\dev\include\input.h:

[24] Keyword: void
[24] Identifier: select_gamepad
[24] Delimiter: '('
[24] Keyword: int
[24] Identifier: gamepad_id
[24] Delimiter: ')'
[25] Delimiter: '{'
[26] Keyword: asm
[27] Delimiter: '{'
[28] Literal string: "mov R0, {gamepad_id}"
[29] Literal string: "out INP_SelectedGamepad, R0"
[30] Delimiter: '}'
[31] Delimiter: '}'
[35] Keyword: int
[35] Identifier: get_selected_gamepad
[35] Delimiter: '('
[35] Delimiter: ')'
[36] Delimiter: '{'
[37] Keyword: asm
[38] Delimiter: '{'
[39] Literal string: "in R0, INP_SelectedGamepad"
[40] Delimiter: '}'
[41] Delimiter: '}'
[48] Keyword: bool
[48] Identifier: gamepad_is_connected
[48] Delimiter: '('
[48] Delimiter: ')'
[49] Delimiter: '{'
[50] Keyword: asm
[51] Delimiter: '{'
[52] Literal string: "in R0, INP_GamepadConnected"
[53] Delimiter: '}'
[54] Delimiter: '}'
[62] Keyword: int
[62] Identifier: gamepad_left
[62] Delimiter: '('
[62] Delimiter: ')'
[63] Delimiter: '{'
[64] Keyword: asm
[65] Delimiter: '{'
[66] Literal string: "in R0, INP_GamepadLeft"
[67] Delimiter: '}'
[68] Delimiter: '}'
[72] Keyword: int
[72] Identifier: gamepad_right
[72] Delimiter: '('
[72] Delimiter: ')'
[73] Delimiter: '{'
[74] Keyword: asm
[75] Delimiter: '{'
[76] Literal string: "in R0, INP_GamepadRight"
[77] Delimiter: '}'
[78] Delimiter: '}'
[82] Keyword: int
[82] Identifier: gamepad_up
[82] Delimiter: '('
[82] Delimiter: ')'
[83] Delimiter: '{'
[84] Keyword: asm
[85] Delimiter: '{'
[86] Literal string: "in R0, INP_GamepadUp"
[87] Delimiter: '}'
[88] Delimiter: '}'
[92] Keyword: int
[92] Identifier: gamepad_down
[92] Delimiter: '('
[92] Delimiter: ')'
[93] Delimiter: '{'
[94] Keyword: asm
[95] Delimiter: '{'
[96] Literal string: "in R0, INP_GamepadDown"
[97] Delimiter: '}'
[98] Delimiter: '}'
[103] Keyword: void
[103] Identifier: gamepad_direction
[103] Delimiter: '('
[103] Keyword: int
[103] Operator: *
[103] Identifier: delta_x
[103] Special symbol: ','
[103] Keyword: int
[103] Operator: *
[103] Identifier: delta_y
[103] Delimiter: ')'
[104] Delimiter: '{'
[106] Keyword: if
[106] Delimiter: '('
[106] Identifier: gamepad_left
[106] Delimiter: '('
[106] Delimiter: ')'
[106] Operator: >
[106] Literal int: 0
[106] Delimiter: ')'
[107] Operator: *
[107] Identifier: delta_x
[107] Operator: =
[107] Operator: -
[107] Literal int: 1
[107] Special symbol: ';'
[109] Keyword: else
[109] Keyword: if
[109] Delimiter: '('
[109] Identifier: gamepad_right
[109] Delimiter: '('
[109] Delimiter: ')'
[109] Operator: >
[109] Literal int: 0
[109] Delimiter: ')'
[110] Operator: *
[110] Identifier: delta_x
[110] Operator: =
[110] Literal int: 1
[110] Special symbol: ';'
[112] Keyword: else
[113] Operator: *
[113] Identifier: delta_x
[113] Operator: =
[113] Literal int: 0
[113] Special symbol: ';'
[116] Keyword: if
[116] Delimiter: '('
[116] Identifier: gamepad_up
[116] Delimiter: '('
[116] Delimiter: ')'
[116] Operator: >
[116] Literal int: 0
[116] Delimiter: ')'
[117] Operator: *
[117] Identifier: delta_y
[117] Operator: =
[117] Operator: -
[117] Literal int: 1
[117] Special symbol: ';'
[119] Keyword: else
[119] Keyword: if
[119] Delimiter: '('
[119] Identifier: gamepad_down
[119] Delimiter: '('
[119] Delimiter: ')'
[119] Operator: >
[119] Literal int: 0
[119] Delimiter: ')'
[120] Operator: *
[120] Identifier: delta_y
[120] Operator: =
[120] Literal int: 1
[120] Special symbol: ';'
[122] Keyword: else
[123] Operator: *
[123] Identifier: delta_y
[123] Operator: =
[123] Literal int: 0
[123] Special symbol: ';'
[124] Delimiter: '}'
[129] Keyword: void
[129] Identifier: gamepad_direction_normalized
[129] Delimiter: '('
[129] Keyword: float
[129] Operator: *
[129] Identifier: delta_x
[129] Special symbol: ','
[129] Keyword: float
[129] Operator: *
[129] Identifier: delta_y
[129] Delimiter: ')'
[130] Delimiter: '{'
[132] Keyword: if
[132] Delimiter: '('
[132] Identifier: gamepad_left
[132] Delimiter: '('
[132] Delimiter: ')'
[132] Operator: >
[132] Literal int: 0
[132] Delimiter: ')'
[133] Operator: *
[133] Identifier: delta_x
[133] Operator: =
[133] Operator: -
[133] Literal int: 1
[133] Special symbol: ';'
[135] Keyword: else
[135] Keyword: if
[135] Delimiter: '('
[135] Identifier: gamepad_right
[135] Delimiter: '('
[135] Delimiter: ')'
[135] Operator: >
[135] Literal int: 0
[135] Delimiter: ')'
[136] Operator: *
[136] Identifier: delta_x
[136] Operator: =
[136] Literal int: 1
[136] Special symbol: ';'
[138] Keyword: else
[139] Operator: *
[139] Identifier: delta_x
[139] Operator: =
[139] Literal int: 0
[139] Special symbol: ';'
[142] Keyword: if
[142] Delimiter: '('
[142] Identifier: gamepad_up
[142] Delimiter: '('
[142] Delimiter: ')'
[142] Operator: >
[142] Literal int: 0
[142] Delimiter: ')'
[143] Operator: *
[143] Identifier: delta_y
[143] Operator: =
[143] Operator: -
[143] Literal int: 1
[143] Special symbol: ';'
[145] Keyword: else
[145] Keyword: if
[145] Delimiter: '('
[145] Identifier: gamepad_down
[145] Delimiter: '('
[145] Delimiter: ')'
[145] Operator: >
[145] Literal int: 0
[145] Delimiter: ')'
[146] Operator: *
[146] Identifier: delta_y
[146] Operator: =
[146] Literal int: 1
[146] Special symbol: ';'
[148] Keyword: else
[149] Operator: *
[149] Identifier: delta_y
[149] Operator: =
[149] Literal int: 0
[149] Special symbol: ';'
[152] Keyword: if
[152] Delimiter: '('
[152] Operator: *
[152] Identifier: delta_x
[152] Operator: &&
[152] Operator: *
[152] Identifier: delta_y
[152] Delimiter: ')'
[153] Delimiter: '{'
[154] Operator: *
[154] Identifier: delta_x
[154] Operator: *=
[154] Literal float: 0.707107
[154] Special symbol: ';'
[155] Operator: *
[155] Identifier: delta_y
[155] Operator: *=
[155] Literal float: 0.707107
[155] Special symbol: ';'
[156] Delimiter: '}'
[157] Delimiter: '}'
[165] Keyword: int
[165] Identifier: gamepad_button_a
[165] Delimiter: '('
[165] Delimiter: ')'
[166] Delimiter: '{'
[167] Keyword: asm
[168] Delimiter: '{'
[169] Literal string: "in R0, INP_GamepadButtonA"
[170] Delimiter: '}'
[171] Delimiter: '}'
[175] Keyword: int
[175] Identifier: gamepad_button_b
[175] Delimiter: '('
[175] Delimiter: ')'
[176] Delimiter: '{'
[177] Keyword: asm
[178] Delimiter: '{'
[179] Literal string: "in R0, INP_GamepadButtonB"
[180] Delimiter: '}'
[181] Delimiter: '}'
[185] Keyword: int
[185] Identifier: gamepad_button_x
[185] Delimiter: '('
[185] Delimiter: ')'
[186] Delimiter: '{'
[187] Keyword: asm
[188] Delimiter: '{'
[189] Literal string: "in R0, INP_GamepadButtonX"
[190] Delimiter: '}'
[191] Delimiter: '}'
[195] Keyword: int
[195] Identifier: gamepad_button_y
[195] Delimiter: '('
[195] Delimiter: ')'
[196] Delimiter: '{'
[197] Keyword: asm
[198] Delimiter: '{'
[199] Literal string: "in R0, INP_GamepadButtonY"
[200] Delimiter: '}'
[201] Delimiter: '}'
[205] Keyword: int
[205] Identifier: gamepad_button_l
[205] Delimiter: '('
[205] Delimiter: ')'
[206] Delimiter: '{'
[207] Keyword: asm
[208] Delimiter: '{'
[209] Literal string: "in R0, INP_GamepadButtonL"
[210] Delimiter: '}'
[211] Delimiter: '}'
[215] Keyword: int
[215] Identifier: gamepad_button_r
[215] Delimiter: '('
[215] Delimiter: ')'
[216] Delimiter: '{'
[217] Keyword: asm
[218] Delimiter: '{'
[219] Literal string: "in R0, INP_GamepadButtonR"
[220] Delimiter: '}'
[221] Delimiter: '}'
[225] Keyword: int
[225] Identifier: gamepad_button_start
[225] Delimiter: '('
[225] Delimiter: ')'
[226] Delimiter: '{'
[227] Keyword: asm
[228] Delimiter: '{'
[229] Literal string: "in R0, INP_GamepadButtonStart"
[230] Delimiter: '}'
[231] Delimiter: '}'

File C:\Vircon32\Vircon32\OceanStorm\dev\include\time.h:

[39] Keyword: int
[39] Identifier: get_cycle_counter
[39] Delimiter: '('
[39] Delimiter: ')'
[40] Delimiter: '{'
[41] Keyword: asm
[42] Delimiter: '{'
[43] Literal string: "in R0, TIM_CycleCounter"
[44] Delimiter: '}'
[45] Delimiter: '}'
[51] Keyword: int
[51] Identifier: get_frame_counter
[51] Delimiter: '('
[51] Delimiter: ')'
[52] Delimiter: '{'
[53] Keyword: asm
[54] Delimiter: '{'
[55] Literal string: "in R0, TIM_FrameCounter"
[56] Delimiter: '}'
[57] Delimiter: '}'
[65] Keyword: int
[65] Identifier: get_date
[65] Delimiter: '('
[65] Delimiter: ')'
[66] Delimiter: '{'
[67] Keyword: asm
[68] Delimiter: '{'
[69] Literal string: "in R0, TIM_CurrentDate"
[70] Delimiter: '}'
[71] Delimiter: '}'
[79] Keyword: int
[79] Identifier: get_time
[79] Delimiter: '('
[79] Delimiter: ')'
[80] Delimiter: '{'
[81] Keyword: asm
[82] Delimiter: '{'
[83] Literal string: "in R0, TIM_CurrentTime"
[84] Delimiter: '}'
[85] Delimiter: '}'
[97] Keyword: struct
[97] Identifier: date_info
[98] Delimiter: '{'
[99] Keyword: int
[99] Identifier: year
[99] Special symbol: ';'
[100] Keyword: int
[100] Identifier: month
[100] Special symbol: ';'
[101] Keyword: int
[101] Identifier: day
[101] Special symbol: ';'
[102] Delimiter: '}'
[102] Special symbol: ';'
[108] Keyword: void
[108] Identifier: translate_date
[108] Delimiter: '('
[108] Keyword: int
[108] Identifier: date
[108] Special symbol: ','
[108] Identifier: date_info
[108] Operator: *
[108] Identifier: translated
[108] Delimiter: ')'
[109] Delimiter: '{'
[111] Identifier: translated
[111] Operator: ->
[111] Identifier: year
[111] Operator: =
[111] Identifier: date
[111] Operator: >>
[111] Literal int: 16
[111] Special symbol: ';'
[112] Keyword: int
[112] Identifier: days_in_year
[112] Operator: =
[112] Identifier: date
[112] Operator: &
[112] Literal int: 65535
[112] Special symbol: ';'
[115] Keyword: int
[115] Delimiter: '['
[115] Literal int: 12
[115] Delimiter: ']'
[115] Identifier: month_days
[115] Operator: =
[115] Delimiter: '{'
[115] Literal int: 31
[115] Special symbol: ','
[115] Literal int: 28
[115] Special symbol: ','
[115] Literal int: 31
[115] Special symbol: ','
[115] Literal int: 30
[115] Special symbol: ','
[115] Literal int: 31
[115] Special symbol: ','
[115] Literal int: 30
[115] Special symbol: ','
[115] Literal int: 31
[115] Special symbol: ','
[115] Literal int: 31
[115] Special symbol: ','
[115] Literal int: 30
[115] Special symbol: ','
[115] Literal int: 31
[115] Special symbol: ','
[115] Literal int: 30
[115] Special symbol: ','
[115] Literal int: 31
[115] Delimiter: '}'
[115] Special symbol: ';'
[118] Keyword: bool
[118] Identifier: is_leap_year
[118] Operator: =
[118] Delimiter: '('
[118] Delimiter: '('
[118] Identifier: translated
[118] Operator: ->
[118] Identifier: year
[118] Operator: %
[118] Literal int: 4
[118] Delimiter: ')'
[118] Operator: ==
[118] Literal int: 0
[118] Delimiter: ')'
[118] Operator: &&
[118] Delimiter: '('
[118] Delimiter: '('
[118] Identifier: translated
[118] Operator: ->
[118] Identifier: year
[118] Operator: %
[118] Literal int: 100
[118] Delimiter: ')'
[118] Operator: !=
[118] Literal int: 0
[118] Delimiter: ')'
[118] Special symbol: ';'
[119] Keyword: if
[119] Delimiter: '('
[119] Identifier: is_leap_year
[119] Delimiter: ')'
[119] Identifier: month_days
[119] Delimiter: '['
[119] Literal int: 1
[119] Delimiter: ']'
[119] Operator: =
[119] Literal int: 29
[119] Special symbol: ';'
[122] Identifier: translated
[122] Operator: ->
[122] Identifier: month
[122] Operator: =
[122] Literal int: 1
[122] Special symbol: ';'
[125] Keyword: for
[125] Delimiter: '('
[125] Keyword: int
[125] Identifier: m
[125] Operator: =
[125] Literal int: 0
[125] Special symbol: ';'
[125] Identifier: m
[125] Operator: <
[125] Literal int: 11
[125] Special symbol: ';'
[125] Operator: ++
[125] Identifier: m
[125] Delimiter: ')'
[126] Delimiter: '{'
[127] Keyword: if
[127] Delimiter: '('
[127] Identifier: days_in_year
[127] Operator: <
[127] Identifier: month_days
[127] Delimiter: '['
[127] Identifier: m
[127] Delimiter: ']'
[127] Delimiter: ')'
[128] Delimiter: '{'
[129] Identifier: translated
[129] Operator: ->
[129] Identifier: day
[129] Operator: =
[129] Identifier: days_in_year
[129] Operator: +
[129] Literal int: 1
[129] Special symbol: ';'
[130] Keyword: return
[130] Special symbol: ';'
[131] Delimiter: '}'
[133] Identifier: days_in_year
[133] Operator: -=
[133] Identifier: month_days
[133] Delimiter: '['
[133] Identifier: m
[133] Delimiter: ']'
[133] Special symbol: ';'
[134] Identifier: translated
[134] Operator: ->
[134] Identifier: month
[134] Operator: ++
[134] Special symbol: ';'
[135] Delimiter: '}'
[138] Identifier: translated
[138] Operator: ->
[138] Identifier: month
[138] Operator: =
[138] Literal int: 12
[138] Special symbol: ';'
[139] Identifier: translated
[139] Operator: ->
[139] Identifier: day
[139] Operator: =
[139] Identifier: days_in_year
[139] Operator: +
[139] Literal int: 1
[139] Special symbol: ';'
[140] Delimiter: '}'
[148] Keyword: struct
[148] Identifier: time_info
[149] Delimiter: '{'
[150] Keyword: int
[150] Identifier: hours
[150] Special symbol: ';'
[151] Keyword: int
[151] Identifier: minutes
[151] Special symbol: ';'
[152] Keyword: int
[152] Identifier: seconds
[152] Special symbol: ';'
[153] Delimiter: '}'
[153] Special symbol: ';'
[159] Keyword: void
[159] Identifier: translate_time
[159] Delimiter: '('
[159] Keyword: int
[159] Identifier: time
[159] Special symbol: ','
[159] Identifier: time_info
[159] Operator: *
[159] Identifier: translated
[159] Delimiter: ')'
[160] Delimiter: '{'
[161] Identifier: translated
[161] Operator: ->
[161] Identifier: hours
[161] Operator: =
[161] Identifier: time
[161] Operator: /
[161] Literal int: 3600
[161] Special symbol: ';'
[162] Identifier: translated
[162] Operator: ->
[162] Identifier: minutes
[162] Operator: =
[162] Delimiter: '('
[162] Identifier: time
[162] Operator: %
[162] Literal int: 3600
[162] Delimiter: ')'
[162] Operator: /
[162] Literal int: 60
[162] Special symbol: ';'
[163] Identifier: translated
[163] Operator: ->
[163] Identifier: seconds
[163] Operator: =
[163] Identifier: time
[163] Operator: %
[163] Literal int: 60
[163] Special symbol: ';'
[164] Delimiter: '}'
[174] Keyword: void
[174] Identifier: end_frame
[174] Delimiter: '('
[174] Delimiter: ')'
[175] Delimiter: '{'
[176] Keyword: asm
[176] Delimiter: '{'
[176] Literal string: "wait"
[176] Delimiter: '}'
[177] Delimiter: '}'
[183] Keyword: void
[183] Identifier: sleep
[183] Delimiter: '('
[183] Keyword: int
[183] Identifier: frames
[183] Delimiter: ')'
[184] Delimiter: '{'
[185] Keyword: int
[185] Identifier: initial_frames
[185] Operator: =
[185] Identifier: get_frame_counter
[185] Delimiter: '('
[185] Delimiter: ')'
[185] Special symbol: ';'
[186] Keyword: int
[186] Identifier: final_frames
[186] Operator: =
[186] Identifier: initial_frames
[186] Operator: +
[186] Identifier: frames
[186] Special symbol: ';'
[188] Keyword: while
[188] Delimiter: '('
[188] Identifier: get_frame_counter
[188] Delimiter: '('
[188] Delimiter: ')'
[188] Operator: <
[188] Identifier: final_frames
[188] Delimiter: ')'
[189] Identifier: end_frame
[189] Delimiter: '('
[189] Delimiter: ')'
[189] Special symbol: ';'
[190] Delimiter: '}'

File src\\game/airplane.h:

[5] Keyword: extern
[5] Keyword: float
[5] Identifier: airplane_x
[5] Special symbol: ';'
[6] Keyword: extern
[6] Keyword: float
[6] Identifier: airplane_y
[6] Special symbol: ';'
[7] Keyword: extern
[7] Keyword: float
[7] Identifier: camera_x
[7] Special symbol: ';'
[8] Keyword: extern
[8] Keyword: float
[8] Identifier: camera_y
[8] Special symbol: ';'
[9] Keyword: extern
[9] Keyword: float
[9] Identifier: airplane_angle
[9] Special symbol: ';'
[10] Keyword: extern
[10] Keyword: float
[10] Identifier: airplane_scale
[10] Special symbol: ';'
[11] Keyword: extern
[11] Keyword: float
[11] Identifier: airplane_velocity
[11] Special symbol: ';'
[12] Keyword: extern
[12] Keyword: float
[12] Identifier: fuel
[12] Special symbol: ';'
[13] Keyword: extern
[13] Keyword: int
[13] Identifier: airplane_frame
[13] Special symbol: ';'
[14] Keyword: extern
[14] Keyword: int
[14] Identifier: anim_timer
[14] Special symbol: ';'
[17] Keyword: void
[17] Identifier: initialize_airplane
[17] Delimiter: '('
[17] Delimiter: ')'
[17] Special symbol: ';'
[18] Keyword: void
[18] Identifier: reset_airplane
[18] Delimiter: '('
[18] Delimiter: ')'
[18] Special symbol: ';'
[19] Keyword: void
[19] Identifier: update_airplane
[19] Delimiter: '('
[19] Delimiter: ')'
[19] Special symbol: ';'
[20] Keyword: void
[20] Identifier: render_airplane
[20] Delimiter: '('
[20] Delimiter: ')'
[20] Special symbol: ';'
[21] Keyword: void
[21] Identifier: render_fuel_gauge
[21] Delimiter: '('
[21] Delimiter: ')'
[21] Special symbol: ';'
[22] Keyword: int
[22] Identifier: is_over_carrier
[22] Delimiter: '('
[22] Delimiter: ')'
[22] Special symbol: ';'

File src\\game/island.h:

[7] Keyword: extern
[7] Keyword: float
[7] Delimiter: '['
[7] Literal int: 10
[7] Delimiter: ']'
[7] Identifier: island_x
[7] Special symbol: ';'
[8] Keyword: extern
[8] Keyword: float
[8] Delimiter: '['
[8] Literal int: 10
[8] Delimiter: ']'
[8] Identifier: island_y
[8] Special symbol: ';'
[9] Keyword: extern
[9] Keyword: int
[9] Delimiter: '['
[9] Literal int: 10
[9] Delimiter: ']'
[9] Delimiter: '['
[9] Literal int: 4
[9] Delimiter: ']'
[9] Delimiter: '['
[9] Literal int: 3
[9] Delimiter: ']'
[9] Identifier: island_tiles
[9] Special symbol: ';'
[10] Keyword: extern
[10] Keyword: int
[10] Identifier: num_islands
[10] Special symbol: ';'
[12] Keyword: void
[12] Identifier: initialize_islands
[12] Delimiter: '('
[12] Delimiter: ')'
[12] Special symbol: ';'
[13] Keyword: void
[13] Identifier: render_islands
[13] Delimiter: '('
[13] Keyword: float
[13] Identifier: camera_x
[13] Special symbol: ','
[13] Keyword: float
[13] Identifier: camera_y
[13] Delimiter: ')'
[13] Special symbol: ';'
[14] Keyword: int
[14] Identifier: is_over_island
[14] Delimiter: '('
[14] Keyword: float
[14] Identifier: x
[14] Special symbol: ','
[14] Keyword: float
[14] Identifier: y
[14] Delimiter: ')'
[14] Special symbol: ';'

File src\\game/render_system.h:

[4] Keyword: void
[4] Identifier: initialize_carrier
[4] Delimiter: '('
[4] Delimiter: ')'
[4] Special symbol: ';'
[5] Keyword: void
[5] Identifier: render_world
[5] Delimiter: '('
[5] Keyword: float
[5] Identifier: camera_x
[5] Special symbol: ','
[5] Keyword: float
[5] Identifier: camera_y
[5] Delimiter: ')'
[5] Special symbol: ';'

File src\\states/menu.h:

[4] Keyword: void
[4] Identifier: update_menu
[4] Delimiter: '('
[4] Delimiter: ')'
[4] Special symbol: ';'
[5] Keyword: void
[5] Identifier: render_menu
[5] Delimiter: '('
[5] Delimiter: ')'
[5] Special symbol: ';'

File src\\states/gameover.h:

[4] Keyword: void
[4] Identifier: update_gameover
[4] Delimiter: '('
[4] Delimiter: ')'
[4] Special symbol: ';'
[5] Keyword: void
[5] Identifier: render_gameover
[5] Delimiter: '('
[5] Delimiter: ')'
[5] Special symbol: ';'

File src\\game\\../utils/utilities.h:

[4] Keyword: float
[4] Identifier: clamp
[4] Delimiter: '('
[4] Keyword: float
[4] Identifier: value
[4] Special symbol: ','
[4] Keyword: float
[4] Identifier: min_value
[4] Special symbol: ','
[4] Keyword: float
[4] Identifier: max_value
[4] Delimiter: ')'
[4] Special symbol: ';'

File C:\Vircon32\Vircon32\OceanStorm\dev\include\math.h:

[37] Keyword: float
[37] Identifier: fmod
[37] Delimiter: '('
[37] Keyword: float
[37] Identifier: x
[37] Special symbol: ','
[37] Keyword: float
[37] Identifier: y
[37] Delimiter: ')'
[38] Delimiter: '{'
[39] Keyword: asm
[40] Delimiter: '{'
[41] Literal string: "push R1"
[42] Literal string: "mov R0, {x}"
[43] Literal string: "mov R1, {y}"
[44] Literal string: "fmod R0, R1"
[45] Literal string: "pop R1"
[46] Delimiter: '}'
[47] Delimiter: '}'
[55] Keyword: int
[55] Identifier: min
[55] Delimiter: '('
[55] Keyword: int
[55] Identifier: a
[55] Special symbol: ','
[55] Keyword: int
[55] Identifier: b
[55] Delimiter: ')'
[56] Delimiter: '{'
[57] Keyword: asm
[58] Delimiter: '{'
[59] Literal string: "push R1"
[60] Literal string: "mov R0, {a}"
[61] Literal string: "mov R1, {b}"
[62] Literal string: "imin R0, R1"
[63] Literal string: "pop R1"
[64] Delimiter: '}'
[65] Delimiter: '}'
[69] Keyword: int
[69] Identifier: max
[69] Delimiter: '('
[69] Keyword: int
[69] Identifier: a
[69] Special symbol: ','
[69] Keyword: int
[69] Identifier: b
[69] Delimiter: ')'
[70] Delimiter: '{'
[71] Keyword: asm
[72] Delimiter: '{'
[73] Literal string: "push R1"
[74] Literal string: "mov R0, {a}"
[75] Literal string: "mov R1, {b}"
[76] Literal string: "imax R0, R1"
[77] Literal string: "pop R1"
[78] Delimiter: '}'
[79] Delimiter: '}'
[83] Keyword: int
[83] Identifier: abs
[83] Delimiter: '('
[83] Keyword: int
[83] Identifier: a
[83] Delimiter: ')'
[84] Delimiter: '{'
[85] Keyword: asm
[86] Delimiter: '{'
[87] Literal string: "mov R0, {a}"
[88] Literal string: "iabs R0"
[89] Delimiter: '}'
[90] Delimiter: '}'
[94] Keyword: float
[94] Identifier: fmin
[94] Delimiter: '('
[94] Keyword: float
[94] Identifier: x
[94] Special symbol: ','
[94] Keyword: float
[94] Identifier: y
[94] Delimiter: ')'
[95] Delimiter: '{'
[96] Keyword: asm
[97] Delimiter: '{'
[98] Literal string: "push R1"
[99] Literal string: "mov R0, {x}"
[100] Literal string: "mov R1, {y}"
[101] Literal string: "fmin R0, R1"
[102] Literal string: "pop R1"
[103] Delimiter: '}'
[104] Delimiter: '}'
[108] Keyword: float
[108] Identifier: fmax
[108] Delimiter: '('
[108] Keyword: float
[108] Identifier: x
[108] Special symbol: ','
[108] Keyword: float
[108] Identifier: y
[108] Delimiter: ')'
[109] Delimiter: '{'
[110] Keyword: asm
[111] Delimiter: '{'
[112] Literal string: "push R1"
[113] Literal string: "mov R0, {x}"
[114] Literal string: "mov R1, {y}"
[115] Literal string: "fmax R0, R1"
[116] Literal string: "pop R1"
[117] Delimiter: '}'
[118] Delimiter: '}'
[122] Keyword: float
[122] Identifier: fabs
[122] Delimiter: '('
[122] Keyword: float
[122] Identifier: x
[122] Delimiter: ')'
[123] Delimiter: '{'
[124] Keyword: asm
[125] Delimiter: '{'
[126] Literal string: "mov R0, {x}"
[127] Literal string: "fabs R0"
[128] Delimiter: '}'
[129] Delimiter: '}'
[137] Keyword: float
[137] Identifier: floor
[137] Delimiter: '('
[137] Keyword: float
[137] Identifier: x
[137] Delimiter: ')'
[138] Delimiter: '{'
[139] Keyword: asm
[140] Delimiter: '{'
[141] Literal string: "mov R0, {x}"
[142] Literal string: "flr R0"
[143] Delimiter: '}'
[144] Delimiter: '}'
[148] Keyword: float
[148] Identifier: ceil
[148] Delimiter: '('
[148] Keyword: float
[148] Identifier: x
[148] Delimiter: ')'
[149] Delimiter: '{'
[150] Keyword: asm
[151] Delimiter: '{'
[152] Literal string: "mov R0, {x}"
[153] Literal string: "ceil R0"
[154] Delimiter: '}'
[155] Delimiter: '}'
[159] Keyword: float
[159] Identifier: round
[159] Delimiter: '('
[159] Keyword: float
[159] Identifier: x
[159] Delimiter: ')'
[160] Delimiter: '{'
[161] Keyword: asm
[162] Delimiter: '{'
[163] Literal string: "mov R0, {x}"
[164] Literal string: "round R0"
[165] Delimiter: '}'
[166] Delimiter: '}'
[175] Keyword: float
[175] Identifier: sin
[175] Delimiter: '('
[175] Keyword: float
[175] Identifier: angle
[175] Delimiter: ')'
[176] Delimiter: '{'
[177] Keyword: asm
[178] Delimiter: '{'
[179] Literal string: "mov R0, {angle}"
[180] Literal string: "sin R0"
[181] Delimiter: '}'
[182] Delimiter: '}'
[187] Keyword: float
[187] Identifier: cos
[187] Delimiter: '('
[187] Keyword: float
[187] Identifier: angle
[187] Delimiter: ')'
[188] Delimiter: '{'
[190] Keyword: asm
[191] Delimiter: '{'
[192] Literal string: "mov R0, {angle}"
[193] Literal string: "fadd R0, 1.570796"
[194] Literal string: "sin R0"
[195] Delimiter: '}'
[196] Delimiter: '}'
[203] Keyword: float
[203] Identifier: tan
[203] Delimiter: '('
[203] Keyword: float
[203] Identifier: angle
[203] Delimiter: ')'
[204] Delimiter: '{'
[207] Keyword: asm
[208] Delimiter: '{'
[209] Literal string: "push R1"
[210] Literal string: "mov R1, {angle}"
[211] Literal string: "mov R0, R1"
[212] Literal string: "sin R0"
[213] Literal string: "fadd R1, 1.570796"
[214] Literal string: "sin R1"
[215] Literal string: "fdiv R0, R1"
[216] Literal string: "pop R1"
[217] Delimiter: '}'
[218] Delimiter: '}'
[225] Keyword: float
[225] Identifier: asin
[225] Delimiter: '('
[225] Keyword: float
[225] Identifier: x
[225] Delimiter: ')'
[226] Delimiter: '{'
[228] Keyword: asm
[229] Delimiter: '{'
[230] Literal string: "mov R0, {x}"
[231] Literal string: "acos R0"
[232] Literal string: "fsgn R0"
[233] Literal string: "fadd R0, 1.570796"
[234] Delimiter: '}'
[235] Delimiter: '}'
[242] Keyword: float
[242] Identifier: acos
[242] Delimiter: '('
[242] Keyword: float
[242] Identifier: x
[242] Delimiter: ')'
[243] Delimiter: '{'
[244] Keyword: asm
[245] Delimiter: '{'
[246] Literal string: "mov R0, {x}"
[247] Literal string: "acos R0"
[248] Delimiter: '}'
[249] Delimiter: '}'
[256] Keyword: float
[256] Identifier: atan2
[256] Delimiter: '('
[256] Keyword: float
[256] Identifier: x
[256] Special symbol: ','
[256] Keyword: float
[256] Identifier: y
[256] Delimiter: ')'
[257] Delimiter: '{'
[258] Keyword: asm
[259] Delimiter: '{'
[260] Literal string: "push R1"
[261] Literal string: "mov R0, {x}"
[262] Literal string: "mov R1, {y}"
[263] Literal string: "atan2 R0, R1"
[264] Literal string: "pop R1"
[265] Delimiter: '}'
[266] Delimiter: '}'
[276] Keyword: float
[276] Identifier: sqrt
[276] Delimiter: '('
[276] Keyword: float
[276] Identifier: x
[276] Delimiter: ')'
[277] Delimiter: '{'
[279] Keyword: asm
[280] Delimiter: '{'
[281] Literal string: "push R1"
[282] Literal string: "mov R0, {x}"
[283] Literal string: "mov R1, 0.5"
[284] Literal string: "pow R0, R1"
[285] Literal string: "pop R1"
[286] Delimiter: '}'
[287] Delimiter: '}'
[293] Keyword: float
[293] Identifier: pow
[293] Delimiter: '('
[293] Keyword: float
[293] Identifier: x
[293] Special symbol: ','
[293] Keyword: float
[293] Identifier: y
[293] Delimiter: ')'
[294] Delimiter: '{'
[295] Keyword: asm
[296] Delimiter: '{'
[297] Literal string: "push R1"
[298] Literal string: "mov R0, {x}"
[299] Literal string: "mov R1, {y}"
[300] Literal string: "pow R0, R1"
[301] Literal string: "pop R1"
[302] Delimiter: '}'
[303] Delimiter: '}'
[307] Keyword: float
[307] Identifier: exp
[307] Delimiter: '('
[307] Keyword: float
[307] Identifier: x
[307] Delimiter: ')'
[308] Delimiter: '{'
[309] Keyword: asm
[310] Delimiter: '{'
[311] Literal string: "push R1"
[312] Literal string: "mov R0, 2.718282"
[313] Literal string: "mov R1, {x}"
[314] Literal string: "pow R0, R1"
[315] Literal string: "pop R1"
[316] Delimiter: '}'
[317] Delimiter: '}'
[323] Keyword: float
[323] Identifier: log
[323] Delimiter: '('
[323] Keyword: float
[323] Identifier: x
[323] Delimiter: ')'
[324] Delimiter: '{'
[325] Keyword: asm
[326] Delimiter: '{'
[327] Literal string: "mov R0, {x}"
[328] Literal string: "log R0"
[329] Delimiter: '}'
[330] Delimiter: '}'

File C:\Vircon32\Vircon32\OceanStorm\dev\include\string.h:

[23] Keyword: bool
[23] Identifier: isdigit
[23] Delimiter: '('
[23] Keyword: int
[23] Identifier: c
[23] Delimiter: ')'
[24] Delimiter: '{'
[25] Keyword: return
[25] Delimiter: '('
[25] Identifier: c
[25] Operator: >=
[25] Literal int: 48
[25] Operator: &&
[25] Identifier: c
[25] Operator: <=
[25] Literal int: 57
[25] Delimiter: ')'
[25] Special symbol: ';'
[26] Delimiter: '}'
[30] Keyword: bool
[30] Identifier: isxdigit
[30] Delimiter: '('
[30] Keyword: int
[30] Identifier: c
[30] Delimiter: ')'
[31] Delimiter: '{'
[32] Keyword: if
[32] Delimiter: '('
[32] Identifier: c
[32] Operator: >=
[32] Literal int: 48
[32] Operator: &&
[32] Identifier: c
[32] Operator: <=
[32] Literal int: 57
[32] Delimiter: ')'
[33] Keyword: return
[33] Literal bool: true
[33] Special symbol: ';'
[35] Keyword: if
[35] Delimiter: '('
[35] Identifier: c
[35] Operator: >=
[35] Literal int: 97
[35] Operator: &&
[35] Identifier: c
[35] Operator: <=
[35] Literal int: 102
[35] Delimiter: ')'
[36] Keyword: return
[36] Literal bool: true
[36] Special symbol: ';'
[38] Keyword: return
[38] Delimiter: '('
[38] Identifier: c
[38] Operator: >=
[38] Literal int: 65
[38] Operator: &&
[38] Identifier: c
[38] Operator: <=
[38] Literal int: 70
[38] Delimiter: ')'
[38] Special symbol: ';'
[39] Delimiter: '}'
[43] Keyword: bool
[43] Identifier: isalpha
[43] Delimiter: '('
[43] Keyword: int
[43] Identifier: c
[43] Delimiter: ')'
[44] Delimiter: '{'
[45] Keyword: if
[45] Delimiter: '('
[45] Identifier: c
[45] Operator: >=
[45] Literal int: 97
[45] Operator: &&
[45] Identifier: c
[45] Operator: <=
[45] Literal int: 122
[45] Delimiter: ')'
[46] Keyword: return
[46] Literal bool: true
[46] Special symbol: ';'
[48] Keyword: return
[48] Delimiter: '('
[48] Identifier: c
[48] Operator: >=
[48] Literal int: 65
[48] Operator: &&
[48] Identifier: c
[48] Operator: <=
[48] Literal int: 90
[48] Delimiter: ')'
[48] Special symbol: ';'
[49] Delimiter: '}'
[53] Keyword: bool
[53] Identifier: isascii
[53] Delimiter: '('
[53] Keyword: int
[53] Identifier: c
[53] Delimiter: ')'
[54] Delimiter: '{'
[55] Keyword: return
[55] Delimiter: '('
[55] Identifier: c
[55] Operator: >=
[55] Literal int: 0
[55] Operator: &&
[55] Identifier: c
[55] Operator: <=
[55] Literal int: 127
[55] Delimiter: ')'
[55] Special symbol: ';'
[56] Delimiter: '}'
[60] Keyword: bool
[60] Identifier: isalphanum
[60] Delimiter: '('
[60] Keyword: int
[60] Identifier: c
[60] Delimiter: ')'
[61] Delimiter: '{'
[64] Keyword: if
[64] Delimiter: '('
[64] Identifier: c
[64] Operator: >=
[64] Literal int: 48
[64] Operator: &&
[64] Identifier: c
[64] Operator: <=
[64] Literal int: 57
[64] Delimiter: ')'
[65] Keyword: return
[65] Literal bool: true
[65] Special symbol: ';'
[67] Keyword: if
[67] Delimiter: '('
[67] Identifier: c
[67] Operator: >=
[67] Literal int: 97
[67] Operator: &&
[67] Identifier: c
[67] Operator: <=
[67] Literal int: 122
[67] Delimiter: ')'
[68] Keyword: return
[68] Literal bool: true
[68] Special symbol: ';'
[70] Keyword: return
[70] Delimiter: '('
[70] Identifier: c
[70] Operator: >=
[70] Literal int: 65
[70] Operator: &&
[70] Identifier: c
[70] Operator: <=
[70] Literal int: 90
[70] Delimiter: ')'
[70] Special symbol: ';'
[71] Delimiter: '}'
[75] Keyword: bool
[75] Identifier: islower
[75] Delimiter: '('
[75] Keyword: int
[75] Identifier: c
[75] Delimiter: ')'
[76] Delimiter: '{'
[78] Keyword: if
[78] Delimiter: '('
[78] Identifier: c
[78] Operator: >=
[78] Literal int: 97
[78] Operator: &&
[78] Identifier: c
[78] Operator: <=
[78] Literal int: 122
[78] Delimiter: ')'
[79] Keyword: return
[79] Literal bool: true
[79] Special symbol: ';'
[82] Keyword: return
[82] Delimiter: '('
[82] Identifier: c
[82] Operator: >=
[82] Literal int: 224
[82] Operator: &&
[82] Identifier: c
[82] Operator: <=
[82] Literal int: 254
[82] Operator: &&
[82] Identifier: c
[82] Operator: !=
[82] Literal int: 247
[82] Delimiter: ')'
[82] Special symbol: ';'
[83] Delimiter: '}'
[87] Keyword: bool
[87] Identifier: isupper
[87] Delimiter: '('
[87] Keyword: int
[87] Identifier: c
[87] Delimiter: ')'
[88] Delimiter: '{'
[90] Keyword: if
[90] Delimiter: '('
[90] Identifier: c
[90] Operator: >=
[90] Literal int: 65
[90] Operator: &&
[90] Identifier: c
[90] Operator: <=
[90] Literal int: 90
[90] Delimiter: ')'
[91] Keyword: return
[91] Literal bool: true
[91] Special symbol: ';'
[94] Keyword: return
[94] Delimiter: '('
[94] Identifier: c
[94] Operator: >=
[94] Literal int: 192
[94] Operator: &&
[94] Identifier: c
[94] Operator: <=
[94] Literal int: 222
[94] Operator: &&
[94] Identifier: c
[94] Operator: !=
[94] Literal int: 215
[94] Delimiter: ')'
[94] Special symbol: ';'
[95] Delimiter: '}'
[99] Keyword: bool
[99] Identifier: isspace
[99] Delimiter: '('
[99] Keyword: int
[99] Identifier: c
[99] Delimiter: ')'
[100] Delimiter: '{'
[101] Keyword: return
[101] Delimiter: '('
[101] Identifier: c
[101] Operator: ==
[101] Literal int: 32
[101] Operator: ||
[101] Identifier: c
[101] Operator: ==
[101] Literal int: 10
[101] Operator: ||
[101] Identifier: c
[101] Operator: ==
[101] Literal int: 13
[101] Operator: ||
[101] Identifier: c
[101] Operator: ==
[101] Literal int: 9
[101] Delimiter: ')'
[101] Special symbol: ';'
[102] Delimiter: '}'
[110] Keyword: int
[110] Identifier: tolower
[110] Delimiter: '('
[110] Keyword: int
[110] Identifier: c
[110] Delimiter: ')'
[111] Delimiter: '{'
[112] Keyword: if
[112] Delimiter: '('
[112] Operator: !
[112] Identifier: isupper
[112] Delimiter: '('
[112] Identifier: c
[112] Delimiter: ')'
[112] Delimiter: ')'
[113] Keyword: return
[113] Identifier: c
[113] Special symbol: ';'
[115] Keyword: return
[115] Identifier: c
[115] Operator: +
[115] Literal int: 32
[115] Special symbol: ';'
[116] Delimiter: '}'
[120] Keyword: int
[120] Identifier: toupper
[120] Delimiter: '('
[120] Keyword: int
[120] Identifier: c
[120] Delimiter: ')'
[121] Delimiter: '{'
[122] Keyword: if
[122] Delimiter: '('
[122] Operator: !
[122] Identifier: islower
[122] Delimiter: '('
[122] Identifier: c
[122] Delimiter: ')'
[122] Delimiter: ')'
[123] Keyword: return
[123] Identifier: c
[123] Special symbol: ';'
[125] Keyword: return
[125] Identifier: c
[125] Operator: -
[125] Literal int: 32
[125] Special symbol: ';'
[126] Delimiter: '}'
[134] Keyword: int
[134] Identifier: strlen
[134] Delimiter: '('
[134] Keyword: int
[134] Operator: *
[134] Identifier: text
[134] Delimiter: ')'
[135] Delimiter: '{'
[136] Keyword: int
[136] Operator: *
[136] Identifier: first_position
[136] Operator: =
[136] Identifier: text
[136] Special symbol: ';'
[138] Keyword: while
[138] Delimiter: '('
[138] Operator: *
[138] Identifier: text
[138] Delimiter: ')'
[139] Operator: ++
[139] Identifier: text
[139] Special symbol: ';'
[141] Keyword: return
[141] Identifier: text
[141] Operator: -
[141] Identifier: first_position
[141] Special symbol: ';'
[142] Delimiter: '}'
[146] Keyword: int
[146] Identifier: strcmp
[146] Delimiter: '('
[146] Keyword: int
[146] Operator: *
[146] Identifier: text1
[146] Special symbol: ','
[146] Keyword: int
[146] Operator: *
[146] Identifier: text2
[146] Delimiter: ')'
[147] Delimiter: '{'
[148] Keyword: while
[148] Delimiter: '('
[148] Operator: *
[148] Identifier: text1
[148] Operator: &&
[148] Operator: *
[148] Identifier: text2
[148] Delimiter: ')'
[149] Delimiter: '{'
[150] Keyword: if
[150] Delimiter: '('
[150] Operator: *
[150] Identifier: text1
[150] Operator: !=
[150] Operator: *
[150] Identifier: text2
[150] Delimiter: ')'
[151] Keyword: break
[151] Special symbol: ';'
[153] Operator: ++
[153] Identifier: text1
[153] Special symbol: ';'
[154] Operator: ++
[154] Identifier: text2
[154] Special symbol: ';'
[155] Delimiter: '}'
[157] Keyword: return
[157] Operator: *
[157] Identifier: text1
[157] Operator: -
[157] Operator: *
[157] Identifier: text2
[157] Special symbol: ';'
[158] Delimiter: '}'
[162] Keyword: int
[162] Identifier: strncmp
[162] Delimiter: '('
[162] Keyword: int
[162] Operator: *
[162] Identifier: text1
[162] Special symbol: ','
[162] Keyword: int
[162] Operator: *
[162] Identifier: text2
[162] Special symbol: ','
[162] Keyword: int
[162] Identifier: max_characters
[162] Delimiter: ')'
[163] Delimiter: '{'
[165] Keyword: if
[165] Delimiter: '('
[165] Identifier: max_characters
[165] Operator: <
[165] Literal int: 1
[165] Delimiter: ')'
[166] Keyword: return
[166] Literal int: 0
[166] Special symbol: ';'
[169] Keyword: while
[169] Delimiter: '('
[169] Operator: *
[169] Identifier: text1
[169] Operator: &&
[169] Operator: *
[169] Identifier: text2
[169] Delimiter: ')'
[170] Delimiter: '{'
[174] Operator: --
[174] Identifier: max_characters
[174] Special symbol: ';'
[176] Keyword: if
[176] Delimiter: '('
[176] Identifier: max_characters
[176] Operator: <=
[176] Literal int: 0
[176] Delimiter: ')'
[177] Keyword: break
[177] Special symbol: ';'
[180] Keyword: if
[180] Delimiter: '('
[180] Operator: *
[180] Identifier: text1
[180] Operator: !=
[180] Operator: *
[180] Identifier: text2
[180] Delimiter: ')'
[181] Keyword: break
[181] Special symbol: ';'
[183] Operator: ++
[183] Identifier: text1
[183] Special symbol: ';'
[184] Operator: ++
[184] Identifier: text2
[184] Special symbol: ';'
[185] Delimiter: '}'
[187] Keyword: return
[187] Operator: *
[187] Identifier: text1
[187] Operator: -
[187] Operator: *
[187] Identifier: text2
[187] Special symbol: ';'
[188] Delimiter: '}'
[192] Keyword: void
[192] Identifier: strcpy
[192] Delimiter: '('
[192] Keyword: int
[192] Operator: *
[192] Identifier: dest_text
[192] Special symbol: ','
[192] Keyword: int
[192] Operator: *
[192] Identifier: src_text
[192] Delimiter: ')'
[193] Delimiter: '{'
[194] Keyword: while
[194] Delimiter: '('
[194] Operator: *
[194] Identifier: src_text
[194] Delimiter: ')'
[195] Delimiter: '{'
[196] Operator: *
[196] Identifier: dest_text
[196] Operator: =
[196] Operator: *
[196] Identifier: src_text
[196] Special symbol: ';'
[197] Operator: ++
[197] Identifier: dest_text
[197] Special symbol: ';'
[198] Operator: ++
[198] Identifier: src_text
[198] Special symbol: ';'
[199] Delimiter: '}'
[202] Operator: *
[202] Identifier: dest_text
[202] Operator: =
[202] Literal int: 0
[202] Special symbol: ';'
[203] Delimiter: '}'
[207] Keyword: void
[207] Identifier: strncpy
[207] Delimiter: '('
[207] Keyword: int
[207] Operator: *
[207] Identifier: dest_text
[207] Special symbol: ','
[207] Keyword: int
[207] Operator: *
[207] Identifier: src_text
[207] Special symbol: ','
[207] Keyword: int
[207] Identifier: max_characters
[207] Delimiter: ')'
[208] Delimiter: '{'
[210] Keyword: if
[210] Delimiter: '('
[210] Identifier: max_characters
[210] Operator: <
[210] Literal int: 1
[210] Delimiter: ')'
[211] Keyword: return
[211] Special symbol: ';'
[214] Keyword: while
[214] Delimiter: '('
[214] Operator: *
[214] Identifier: src_text
[214] Delimiter: ')'
[215] Delimiter: '{'
[216] Operator: *
[216] Identifier: dest_text
[216] Operator: =
[216] Operator: *
[216] Identifier: src_text
[216] Special symbol: ';'
[217] Operator: ++
[217] Identifier: dest_text
[217] Special symbol: ';'
[218] Operator: ++
[218] Identifier: src_text
[218] Special symbol: ';'
[221] Operator: --
[221] Identifier: max_characters
[221] Special symbol: ';'
[223] Keyword: if
[223] Delimiter: '('
[223] Identifier: max_characters
[223] Operator: <=
[223] Literal int: 0
[223] Delimiter: ')'
[224] Keyword: break
[224] Special symbol: ';'
[225] Delimiter: '}'
[228] Operator: *
[228] Identifier: dest_text
[228] Operator: =
[228] Literal int: 0
[228] Special symbol: ';'
[229] Delimiter: '}'
[235] Keyword: void
[235] Identifier: strcat
[235] Delimiter: '('
[235] Keyword: int
[235] Operator: *
[235] Identifier: initial_text
[235] Special symbol: ','
[235] Keyword: int
[235] Operator: *
[235] Identifier: added_text
[235] Delimiter: ')'
[236] Delimiter: '{'
[239] Keyword: while
[239] Delimiter: '('
[239] Operator: *
[239] Identifier: initial_text
[239] Delimiter: ')'
[240] Operator: ++
[240] Identifier: initial_text
[240] Special symbol: ';'
[243] Keyword: while
[243] Delimiter: '('
[243] Operator: *
[243] Identifier: added_text
[243] Delimiter: ')'
[244] Delimiter: '{'
[245] Operator: *
[245] Identifier: initial_text
[245] Operator: =
[245] Operator: *
[245] Identifier: added_text
[245] Special symbol: ';'
[246] Operator: ++
[246] Identifier: initial_text
[246] Special symbol: ';'
[247] Operator: ++
[247] Identifier: added_text
[247] Special symbol: ';'
[248] Delimiter: '}'
[251] Operator: *
[251] Identifier: initial_text
[251] Operator: =
[251] Literal int: 0
[251] Special symbol: ';'
[252] Delimiter: '}'
[256] Keyword: void
[256] Identifier: strncat
[256] Delimiter: '('
[256] Keyword: int
[256] Operator: *
[256] Identifier: initial_text
[256] Special symbol: ','
[256] Keyword: int
[256] Operator: *
[256] Identifier: added_text
[256] Special symbol: ','
[256] Keyword: int
[256] Identifier: max_characters
[256] Delimiter: ')'
[257] Delimiter: '{'
[259] Keyword: if
[259] Delimiter: '('
[259] Identifier: max_characters
[259] Operator: <
[259] Literal int: 1
[259] Delimiter: ')'
[260] Keyword: return
[260] Special symbol: ';'
[264] Keyword: while
[264] Delimiter: '('
[264] Operator: *
[264] Identifier: initial_text
[264] Delimiter: ')'
[265] Operator: ++
[265] Identifier: initial_text
[265] Special symbol: ';'
[268] Keyword: while
[268] Delimiter: '('
[268] Operator: *
[268] Identifier: added_text
[268] Delimiter: ')'
[269] Delimiter: '{'
[270] Operator: *
[270] Identifier: initial_text
[270] Operator: =
[270] Operator: *
[270] Identifier: added_text
[270] Special symbol: ';'
[271] Operator: ++
[271] Identifier: initial_text
[271] Special symbol: ';'
[272] Operator: ++
[272] Identifier: added_text
[272] Special symbol: ';'
[275] Operator: --
[275] Identifier: max_characters
[275] Special symbol: ';'
[277] Keyword: if
[277] Delimiter: '('
[277] Identifier: max_characters
[277] Operator: <=
[277] Literal int: 0
[277] Delimiter: ')'
[278] Keyword: break
[278] Special symbol: ';'
[279] Delimiter: '}'
[282] Operator: *
[282] Identifier: initial_text
[282] Operator: =
[282] Literal int: 0
[282] Special symbol: ';'
[283] Delimiter: '}'
[304] Keyword: void
[304] Identifier: itoa
[304] Delimiter: '('
[304] Keyword: int
[304] Identifier: value
[304] Special symbol: ','
[304] Keyword: int
[304] Operator: *
[304] Identifier: result_text
[304] Special symbol: ','
[304] Keyword: int
[304] Identifier: base
[304] Delimiter: ')'
[305] Delimiter: '{'
[306] Keyword: int
[306] Delimiter: '['
[306] Literal int: 16
[306] Operator: +
[306] Literal int: 1
[306] Delimiter: ']'
[306] Identifier: hex_characters
[306] Operator: =
[306] Literal string: "0123456789ABCDEF"
[306] Special symbol: ';'
[307] Keyword: int
[307] Delimiter: '['
[307] Literal int: 33
[307] Delimiter: ']'
[307] Identifier: reversed_digits
[307] Special symbol: ';'
[310] Keyword: if
[310] Delimiter: '('
[310] Identifier: base
[310] Operator: <
[310] Literal int: 2
[310] Operator: ||
[310] Identifier: base
[310] Operator: >
[310] Literal int: 16
[310] Delimiter: ')'
[311] Keyword: return
[311] Special symbol: ';'
[314] Keyword: if
[314] Delimiter: '('
[314] Identifier: base
[314] Operator: ==
[314] Literal int: 10
[314] Operator: &&
[314] Identifier: value
[314] Operator: <
[314] Literal int: 0
[314] Delimiter: ')'
[315] Delimiter: '{'
[316] Operator: *
[316] Identifier: result_text
[316] Operator: =
[316] Literal int: 45
[316] Special symbol: ';'
[317] Operator: ++
[317] Identifier: result_text
[317] Special symbol: ';'
[318] Identifier: value
[318] Operator: =
[318] Operator: -
[318] Identifier: value
[318] Special symbol: ';'
[319] Delimiter: '}'
[322] Keyword: int
[322] Operator: *
[322] Identifier: next_digit
[322] Operator: =
[322] Identifier: reversed_digits
[322] Special symbol: ';'
[324] Keyword: do
[325] Delimiter: '{'
[326] Operator: *
[326] Identifier: next_digit
[326] Operator: =
[326] Identifier: hex_characters
[326] Delimiter: '['
[326] Identifier: value
[326] Operator: %
[326] Identifier: base
[326] Delimiter: ']'
[326] Special symbol: ';'
[327] Operator: ++
[327] Identifier: next_digit
[327] Special symbol: ';'
[329] Identifier: value
[329] Operator: /=
[329] Identifier: base
[329] Special symbol: ';'
[330] Delimiter: '}'
[331] Keyword: while
[331] Delimiter: '('
[331] Identifier: value
[331] Delimiter: ')'
[331] Special symbol: ';'
[334] Keyword: do
[335] Delimiter: '{'
[336] Operator: --
[336] Identifier: next_digit
[336] Special symbol: ';'
[337] Operator: *
[337] Identifier: result_text
[337] Operator: =
[337] Operator: *
[337] Identifier: next_digit
[337] Special symbol: ';'
[338] Operator: ++
[338] Identifier: result_text
[338] Special symbol: ';'
[339] Delimiter: '}'
[340] Keyword: while
[340] Delimiter: '('
[340] Identifier: next_digit
[340] Operator: !=
[340] Operator: &
[340] Identifier: reversed_digits
[340] Delimiter: '['
[340] Literal int: 0
[340] Delimiter: ']'
[340] Delimiter: ')'
[340] Special symbol: ';'
[343] Operator: *
[343] Identifier: result_text
[343] Operator: =
[343] Literal int: 0
[343] Special symbol: ';'
[344] Delimiter: '}'
[349] Keyword: void
[349] Identifier: ftoa
[349] Delimiter: '('
[349] Keyword: float
[349] Identifier: value
[349] Special symbol: ','
[349] Keyword: int
[349] Operator: *
[349] Identifier: result_text
[349] Delimiter: ')'
[350] Delimiter: '{'
[356] Keyword: if
[356] Delimiter: '('
[356] Identifier: value
[356] Operator: <
[356] Literal int: 0
[356] Delimiter: ')'
[357] Delimiter: '{'
[358] Operator: *
[358] Identifier: result_text
[358] Operator: =
[358] Literal int: 45
[358] Special symbol: ';'
[359] Operator: ++
[359] Identifier: result_text
[359] Special symbol: ';'
[360] Identifier: value
[360] Operator: =
[360] Operator: -
[360] Identifier: value
[360] Special symbol: ';'
[361] Delimiter: '}'
[365] Keyword: int
[365] Identifier: integer_part
[365] Special symbol: ','
[365] Identifier: decimal_part
[365] Special symbol: ';'
[369] Keyword: asm
[370] Delimiter: '{'
[371] Literal string: "mov R0, {value}"
[372] Literal string: "flr R0"
[373] Literal string: "cfi R0"
[374] Literal string: "mov {integer_part}, R0"
[375] Delimiter: '}'
[379] Keyword: asm
[380] Delimiter: '{'
[381] Literal string: "push R1"
[382] Literal string: "mov R0, {value}"
[383] Literal string: "mov R1, {integer_part}"
[384] Literal string: "cif R1"
[385] Literal string: "fsub R0, R1"
[386] Literal string: "fmul R0, 100000.0"
[387] Literal string: "round R0"
[388] Literal string: "cfi R0"
[389] Literal string: "mov {decimal_part}, R0"
[390] Literal string: "pop R1"
[391] Delimiter: '}'
[394] Identifier: itoa
[394] Delimiter: '('
[394] Identifier: integer_part
[394] Special symbol: ','
[394] Identifier: result_text
[394] Special symbol: ','
[394] Literal int: 10
[394] Delimiter: ')'
[394] Special symbol: ';'
[397] Keyword: if
[397] Delimiter: '('
[397] Operator: !
[397] Identifier: decimal_part
[397] Delimiter: ')'
[398] Keyword: return
[398] Special symbol: ';'
[401] Identifier: strcat
[401] Delimiter: '('
[401] Identifier: result_text
[401] Special symbol: ','
[401] Literal string: "."
[401] Delimiter: ')'
[401] Special symbol: ';'
[404] Keyword: int
[404] Identifier: decimal_aux
[404] Operator: =
[404] Identifier: decimal_part
[404] Special symbol: ';'
[406] Keyword: while
[406] Delimiter: '('
[406] Identifier: decimal_aux
[406] Operator: <
[406] Literal int: 10000
[406] Delimiter: ')'
[407] Delimiter: '{'
[408] Identifier: strcat
[408] Delimiter: '('
[408] Identifier: result_text
[408] Special symbol: ','
[408] Literal string: "0"
[408] Delimiter: ')'
[408] Special symbol: ';'
[409] Identifier: decimal_aux
[409] Operator: *=
[409] Literal int: 10
[409] Special symbol: ';'
[410] Delimiter: '}'
[413] Keyword: while
[413] Delimiter: '('
[413] Operator: !
[413] Delimiter: '('
[413] Identifier: decimal_part
[413] Operator: %
[413] Literal int: 10
[413] Delimiter: ')'
[413] Delimiter: ')'
[414] Identifier: decimal_part
[414] Operator: /=
[414] Literal int: 10
[414] Special symbol: ';'
[417] Keyword: int
[417] Delimiter: '['
[417] Literal int: 8
[417] Delimiter: ']'
[417] Identifier: decimal_string
[417] Special symbol: ';'
[418] Identifier: itoa
[418] Delimiter: '('
[418] Identifier: decimal_part
[418] Special symbol: ','
[418] Identifier: decimal_string
[418] Special symbol: ','
[418] Literal int: 10
[418] Delimiter: ')'
[418] Special symbol: ';'
[419] Identifier: strcat
[419] Delimiter: '('
[419] Identifier: result_text
[419] Special symbol: ','
[419] Identifier: decimal_string
[419] Delimiter: ')'
[419] Special symbol: ';'
[420] Delimiter: '}'

File src\\game/airplane.c:

[12] Keyword: float
[12] Identifier: airplane_x
[12] Special symbol: ';'
[13] Keyword: float
[13] Identifier: airplane_y
[13] Special symbol: ';'
[14] Keyword: float
[14] Identifier: camera_x
[14] Special symbol: ';'
[15] Keyword: float
[15] Identifier: camera_y
[15] Special symbol: ';'
[16] Keyword: float
[16] Identifier: airplane_angle
[16] Special symbol: ';'
[17] Keyword: float
[17] Identifier: airplane_scale
[17] Special symbol: ';'
[18] Keyword: float
[18] Identifier: airplane_velocity
[18] Special symbol: ';'
[19] Keyword: float
[19] Identifier: fuel
[19] Special symbol: ';'
[20] Keyword: int
[20] Identifier: airplane_frame
[20] Special symbol: ';'
[21] Keyword: int
[21] Identifier: anim_timer
[21] Special symbol: ';'
[24] Keyword: extern
[24] Keyword: int
[24] Identifier: game_state
[24] Special symbol: ';'
[26] Keyword: int
[26] Identifier: is_over_carrier
[26] Delimiter: '('
[26] Delimiter: ')'
[27] Delimiter: '{'
[28] Keyword: float
[28] Identifier: carrier_center_x
[28] Operator: =
[28] Delimiter: '('
[28] Literal int: 2000
[28] Operator: /
[28] Literal int: 2
[28] Delimiter: ')'
[28] Operator: +
[28] Delimiter: '('
[28] Literal int: 77
[28] Operator: /
[28] Literal int: 2
[28] Delimiter: ')'
[28] Special symbol: ';'
[29] Keyword: float
[29] Identifier: carrier_bottom
[29] Operator: =
[29] Delimiter: '('
[29] Literal int: 2000
[29] Operator: /
[29] Literal int: 2
[29] Delimiter: ')'
[29] Operator: +
[29] Literal int: 255
[29] Special symbol: ';'
[32] Keyword: float
[32] Identifier: dx
[32] Operator: =
[32] Identifier: airplane_x
[32] Operator: -
[32] Identifier: carrier_center_x
[32] Special symbol: ';'
[33] Keyword: float
[33] Identifier: dy
[33] Operator: =
[33] Identifier: airplane_y
[33] Operator: -
[33] Delimiter: '('
[33] Literal int: 2000
[33] Operator: /
[33] Literal int: 2
[33] Delimiter: ')'
[33] Special symbol: ';'
[36] Keyword: return
[36] Delimiter: '('
[36] Identifier: dx
[36] Operator: >=
[36] Operator: -
[36] Literal int: 77
[36] Operator: /
[36] Literal int: 2
[36] Operator: &&
[36] Identifier: dx
[36] Operator: <=
[36] Literal int: 77
[36] Operator: /
[36] Literal int: 2
[36] Operator: &&
[37] Identifier: dy
[37] Operator: >=
[37] Literal int: 0
[37] Operator: &&
[37] Identifier: dy
[37] Operator: <=
[37] Literal int: 255
[37] Delimiter: ')'
[37] Special symbol: ';'
[38] Delimiter: '}'
[40] Keyword: void
[40] Identifier: render_fuel_gauge
[40] Delimiter: '('
[40] Delimiter: ')'
[41] Delimiter: '{'
[43] Identifier: select_texture
[43] Delimiter: '('
[43] Operator: -
[43] Literal int: 1
[43] Delimiter: ')'
[43] Special symbol: ';'
[44] Identifier: set_multiply_color
[44] Delimiter: '('
[44] Literal int: -16776961
[44] Delimiter: ')'
[44] Special symbol: ';'
[47] Identifier: print_at
[47] Delimiter: '('
[47] Literal int: 10
[47] Special symbol: ','
[47] Literal int: 10
[47] Special symbol: ','
[47] Literal string: "FUEL:"
[47] Delimiter: ')'
[47] Special symbol: ';'
[50] Keyword: int
[50] Identifier: max_bar_width
[50] Operator: =
[50] Literal int: 100
[50] Special symbol: ';'
[51] Keyword: int
[51] Identifier: bar_height
[51] Operator: =
[51] Literal int: 10
[51] Special symbol: ';'
[52] Keyword: int
[52] Identifier: current_width
[52] Operator: =
[52] Delimiter: '('
[52] Keyword: int
[52] Delimiter: ')'
[52] Delimiter: '('
[52] Delimiter: '('
[52] Identifier: fuel
[52] Operator: /
[52] Literal int: 1000
[52] Delimiter: ')'
[52] Operator: *
[52] Identifier: max_bar_width
[52] Delimiter: ')'
[52] Special symbol: ';'
[55] Keyword: for
[55] Delimiter: '('
[55] Keyword: int
[55] Identifier: x
[55] Operator: =
[55] Literal int: 0
[55] Special symbol: ';'
[55] Identifier: x
[55] Operator: <
[55] Identifier: max_bar_width
[55] Special symbol: ';'
[55] Identifier: x
[55] Operator: ++
[55] Delimiter: ')'
[56] Delimiter: '{'
[57] Keyword: for
[57] Delimiter: '('
[57] Keyword: int
[57] Identifier: y
[57] Operator: =
[57] Literal int: 0
[57] Special symbol: ';'
[57] Identifier: y
[57] Operator: <
[57] Identifier: bar_height
[57] Special symbol: ';'
[57] Identifier: y
[57] Operator: ++
[57] Delimiter: ')'
[58] Delimiter: '{'
[59] Identifier: draw_region_at
[59] Delimiter: '('
[59] Literal int: 60
[59] Operator: +
[59] Identifier: x
[59] Special symbol: ','
[59] Literal int: 10
[59] Operator: +
[59] Identifier: y
[59] Delimiter: ')'
[59] Special symbol: ';'
[60] Delimiter: '}'
[61] Delimiter: '}'
[64] Identifier: set_multiply_color
[64] Delimiter: '('
[64] Literal int: -1
[64] Delimiter: ')'
[64] Special symbol: ';'
[65] Keyword: for
[65] Delimiter: '('
[65] Keyword: int
[65] Identifier: x
[65] Operator: =
[65] Literal int: 0
[65] Special symbol: ';'
[65] Identifier: x
[65] Operator: <
[65] Identifier: current_width
[65] Special symbol: ';'
[65] Identifier: x
[65] Operator: ++
[65] Delimiter: ')'
[66] Delimiter: '{'
[67] Keyword: for
[67] Delimiter: '('
[67] Keyword: int
[67] Identifier: y
[67] Operator: =
[67] Literal int: 0
[67] Special symbol: ';'
[67] Identifier: y
[67] Operator: <
[67] Identifier: bar_height
[67] Special symbol: ';'
[67] Identifier: y
[67] Operator: ++
[67] Delimiter: ')'
[68] Delimiter: '{'
[69] Identifier: draw_region_at
[69] Delimiter: '('
[69] Literal int: 60
[69] Operator: +
[69] Identifier: x
[69] Special symbol: ','
[69] Literal int: 10
[69] Operator: +
[69] Identifier: y
[69] Delimiter: ')'
[69] Special symbol: ';'
[70] Delimiter: '}'
[71] Delimiter: '}'
[72] Delimiter: '}'
[74] Keyword: void
[74] Identifier: initialize_airplane
[74] Delimiter: '('
[74] Delimiter: ')'
[75] Delimiter: '{'
[76] Identifier: select_texture
[76] Delimiter: '('
[76] Literal int: 0
[76] Delimiter: ')'
[76] Special symbol: ';'
[80] Identifier: select_region
[80] Delimiter: '('
[80] Literal int: 0
[80] Delimiter: ')'
[80] Special symbol: ';'
[81] Identifier: define_region
[81] Delimiter: '('
[82] Literal int: 0
[82] Special symbol: ','
[83] Literal int: 0
[83] Special symbol: ','
[84] Literal int: 128
[84] Special symbol: ','
[85] Literal int: 91
[85] Special symbol: ','
[86] Literal int: 128
[86] Operator: /
[86] Literal int: 2
[86] Special symbol: ','
[87] Literal int: 91
[87] Operator: /
[87] Literal int: 2
[88] Delimiter: ')'
[88] Special symbol: ';'
[91] Identifier: select_region
[91] Delimiter: '('
[91] Literal int: 1
[91] Delimiter: ')'
[91] Special symbol: ';'
[92] Identifier: define_region
[92] Delimiter: '('
[93] Literal int: 128
[93] Special symbol: ','
[94] Literal int: 0
[94] Special symbol: ','
[95] Literal int: 128
[95] Operator: *
[95] Literal int: 2
[95] Special symbol: ','
[96] Literal int: 91
[96] Special symbol: ','
[97] Literal int: 128
[97] Operator: *
[97] Literal float: 1.500000
[97] Special symbol: ','
[98] Literal int: 91
[98] Operator: /
[98] Literal int: 2
[99] Delimiter: ')'
[99] Special symbol: ';'
[103] Identifier: select_region
[103] Delimiter: '('
[103] Literal int: 2
[103] Delimiter: ')'
[103] Special symbol: ';'
[104] Identifier: define_region
[104] Delimiter: '('
[105] Literal int: 0
[105] Special symbol: ','
[106] Literal int: 0
[106] Special symbol: ','
[107] Literal int: 128
[107] Special symbol: ','
[108] Literal int: 91
[108] Special symbol: ','
[109] Literal int: 128
[109] Operator: /
[109] Literal int: 2
[109] Special symbol: ','
[110] Literal int: 91
[110] Operator: /
[110] Literal int: 2
[111] Delimiter: ')'
[111] Special symbol: ';'
[114] Identifier: select_region
[114] Delimiter: '('
[114] Literal int: 2
[114] Operator: +
[114] Literal int: 1
[114] Delimiter: ')'
[114] Special symbol: ';'
[115] Identifier: define_region
[115] Delimiter: '('
[116] Literal int: 128
[116] Special symbol: ','
[117] Literal int: 0
[117] Special symbol: ','
[118] Literal int: 128
[118] Operator: *
[118] Literal int: 2
[118] Special symbol: ','
[119] Literal int: 91
[119] Special symbol: ','
[120] Literal int: 128
[120] Operator: *
[120] Literal float: 1.500000
[120] Special symbol: ','
[121] Literal int: 91
[121] Operator: /
[121] Literal int: 2
[122] Delimiter: ')'
[122] Special symbol: ';'
[124] Identifier: airplane_frame
[124] Operator: =
[124] Literal int: 0
[124] Special symbol: ';'
[125] Identifier: anim_timer
[125] Operator: =
[125] Literal int: 0
[125] Special symbol: ';'
[126] Identifier: reset_airplane
[126] Delimiter: '('
[126] Delimiter: ')'
[126] Special symbol: ';'
[127] Delimiter: '}'
[129] Keyword: void
[129] Identifier: reset_airplane
[129] Delimiter: '('
[129] Delimiter: ')'
[130] Delimiter: '{'
[132] Identifier: airplane_x
[132] Operator: =
[132] Delimiter: '('
[132] Literal int: 2000
[132] Operator: /
[132] Literal int: 2
[132] Delimiter: ')'
[132] Operator: +
[132] Delimiter: '('
[132] Literal int: 77
[132] Operator: /
[132] Literal int: 2
[132] Delimiter: ')'
[132] Operator: -
[132] Literal int: 40
[132] Special symbol: ';'
[133] Identifier: airplane_y
[133] Operator: =
[133] Delimiter: '('
[133] Literal int: 2000
[133] Operator: /
[133] Literal int: 2
[133] Delimiter: ')'
[133] Operator: +
[133] Literal int: 20
[133] Special symbol: ';'
[134] Identifier: airplane_angle
[134] Operator: =
[134] Literal float: 0.000000
[134] Special symbol: ';'
[135] Identifier: airplane_scale
[135] Operator: =
[135] Literal float: 0.300000
[135] Special symbol: ';'
[136] Identifier: airplane_velocity
[136] Operator: =
[136] Literal float: 0.000000
[136] Special symbol: ';'
[137] Identifier: fuel
[137] Operator: =
[137] Literal int: 1000
[137] Special symbol: ';'
[140] Identifier: camera_x
[140] Operator: =
[140] Identifier: airplane_x
[140] Operator: -
[140] Delimiter: '('
[140] Literal int: 640
[140] Operator: /
[140] Literal int: 2
[140] Delimiter: ')'
[140] Special symbol: ';'
[141] Identifier: camera_y
[141] Operator: =
[141] Identifier: airplane_y
[141] Operator: -
[141] Delimiter: '('
[141] Literal int: 360
[141] Operator: /
[141] Literal int: 2
[141] Delimiter: ')'
[141] Special symbol: ';'
[142] Delimiter: '}'
[144] Keyword: void
[144] Identifier: update_airplane
[144] Delimiter: '('
[144] Delimiter: ')'
[145] Delimiter: '{'
[147] Keyword: int
[147] Identifier: direction_x
[147] Special symbol: ','
[147] Identifier: direction_y
[147] Special symbol: ';'
[148] Identifier: gamepad_direction
[148] Delimiter: '('
[148] Operator: &
[148] Identifier: direction_x
[148] Special symbol: ','
[148] Operator: &
[148] Identifier: direction_y
[148] Delimiter: ')'
[148] Special symbol: ';'
[151] Keyword: if
[151] Delimiter: '('
[151] Identifier: gamepad_left
[151] Delimiter: '('
[151] Delimiter: ')'
[151] Operator: >
[151] Literal int: 0
[151] Delimiter: ')'
[152] Identifier: airplane_angle
[152] Operator: -=
[152] Literal float: 0.050000
[152] Special symbol: ';'
[153] Keyword: if
[153] Delimiter: '('
[153] Identifier: gamepad_right
[153] Delimiter: '('
[153] Delimiter: ')'
[153] Operator: >
[153] Literal int: 0
[153] Delimiter: ')'
[154] Identifier: airplane_angle
[154] Operator: +=
[154] Literal float: 0.050000
[154] Special symbol: ';'
[157] Keyword: if
[157] Delimiter: '('
[157] Identifier: gamepad_up
[157] Delimiter: '('
[157] Delimiter: ')'
[157] Operator: >
[157] Literal int: 0
[157] Operator: &&
[157] Identifier: fuel
[157] Operator: >
[157] Literal int: 0
[157] Delimiter: ')'
[158] Delimiter: '{'
[159] Identifier: airplane_x
[159] Operator: +=
[159] Literal float: 3.000000
[159] Operator: *
[159] Identifier: sin
[159] Delimiter: '('
[159] Identifier: airplane_angle
[159] Delimiter: ')'
[159] Special symbol: ';'
[160] Identifier: airplane_y
[160] Operator: -=
[160] Literal float: 3.000000
[160] Operator: *
[160] Identifier: cos
[160] Delimiter: '('
[160] Identifier: airplane_angle
[160] Delimiter: ')'
[160] Special symbol: ';'
[161] Identifier: airplane_scale
[161] Operator: =
[161] Identifier: clamp
[161] Delimiter: '('
[161] Identifier: airplane_scale
[161] Operator: +
[161] Literal float: 0.010000
[161] Special symbol: ','
[161] Literal float: 0.200000
[161] Special symbol: ','
[161] Literal float: 1.000000
[161] Delimiter: ')'
[161] Special symbol: ';'
[162] Identifier: fuel
[162] Operator: -=
[162] Literal float: 0.500000
[162] Special symbol: ';'
[165] Identifier: anim_timer
[165] Operator: ++
[165] Special symbol: ';'
[166] Keyword: if
[166] Delimiter: '('
[166] Identifier: anim_timer
[166] Operator: >=
[166] Literal int: 10
[166] Delimiter: ')'
[167] Delimiter: '{'
[168] Identifier: anim_timer
[168] Operator: =
[168] Literal int: 0
[168] Special symbol: ';'
[169] Identifier: airplane_frame
[169] Operator: =
[169] Literal int: 1
[169] Operator: -
[169] Identifier: airplane_frame
[169] Special symbol: ';'
[170] Delimiter: '}'
[171] Delimiter: '}'
[172] Keyword: else
[173] Delimiter: '{'
[174] Identifier: airplane_scale
[174] Operator: =
[174] Identifier: clamp
[174] Delimiter: '('
[174] Identifier: airplane_scale
[174] Operator: -
[174] Literal float: 0.010000
[174] Special symbol: ','
[174] Literal float: 0.200000
[174] Special symbol: ','
[174] Literal float: 1.000000
[174] Delimiter: ')'
[174] Special symbol: ';'
[175] Identifier: airplane_frame
[175] Operator: =
[175] Literal int: 0
[175] Special symbol: ';'
[176] Identifier: anim_timer
[176] Operator: =
[176] Literal int: 0
[176] Special symbol: ';'
[177] Delimiter: '}'
[180] Keyword: if
[180] Delimiter: '('
[180] Identifier: airplane_scale
[180] Operator: <=
[180] Literal float: 0.500000
[180] Delimiter: ')'
[181] Delimiter: '{'
[183] Keyword: if
[183] Delimiter: '('
[183] Identifier: is_over_carrier
[183] Delimiter: '('
[183] Delimiter: ')'
[183] Operator: ||
[183] Identifier: is_over_island
[183] Delimiter: '('
[183] Identifier: airplane_x
[183] Special symbol: ','
[183] Identifier: airplane_y
[183] Delimiter: ')'
[183] Delimiter: ')'
[184] Delimiter: '{'
[186] Identifier: airplane_scale
[186] Operator: =
[186] Literal float: 0.500000
[186] Special symbol: ';'
[189] Keyword: if
[189] Delimiter: '('
[189] Identifier: is_over_carrier
[189] Delimiter: '('
[189] Delimiter: ')'
[189] Delimiter: ')'
[190] Delimiter: '{'
[191] Identifier: fuel
[191] Operator: =
[191] Identifier: clamp
[191] Delimiter: '('
[191] Identifier: fuel
[191] Operator: +
[191] Literal float: 2.000000
[191] Special symbol: ','
[191] Literal int: 0
[191] Special symbol: ','
[191] Literal int: 1000
[191] Delimiter: ')'
[191] Special symbol: ';'
[192] Delimiter: '}'
[193] Delimiter: '}'
[194] Keyword: else
[194] Keyword: if
[194] Delimiter: '('
[194] Identifier: airplane_scale
[194] Operator: <=
[194] Literal float: 0.200000
[194] Delimiter: ')'
[195] Delimiter: '{'
[197] Identifier: game_state
[197] Operator: =
[197] Literal int: 2
[197] Special symbol: ';'
[198] Delimiter: '}'
[199] Delimiter: '}'
[200] Keyword: else
[201] Delimiter: '{'
[203] Identifier: airplane_scale
[203] Operator: =
[203] Identifier: clamp
[203] Delimiter: '('
[203] Identifier: airplane_scale
[203] Operator: -
[203] Literal float: 0.010000
[203] Special symbol: ','
[203] Literal float: 0.200000
[203] Special symbol: ','
[203] Literal float: 1.000000
[203] Delimiter: ')'
[203] Special symbol: ';'
[204] Delimiter: '}'
[207] Keyword: if
[207] Delimiter: '('
[207] Identifier: fuel
[207] Operator: <=
[207] Literal int: 0
[207] Operator: &&
[207] Identifier: airplane_scale
[207] Operator: <=
[207] Literal float: 0.200000
[207] Operator: &&
[207] Operator: !
[207] Identifier: is_over_carrier
[207] Delimiter: '('
[207] Delimiter: ')'
[207] Operator: &&
[207] Operator: !
[207] Identifier: is_over_island
[207] Delimiter: '('
[207] Identifier: airplane_x
[207] Special symbol: ','
[207] Identifier: airplane_y
[207] Delimiter: ')'
[207] Delimiter: ')'
[208] Delimiter: '{'
[209] Identifier: game_state
[209] Operator: =
[209] Literal int: 2
[209] Special symbol: ';'
[210] Delimiter: '}'
[213] Identifier: airplane_x
[213] Operator: =
[213] Identifier: clamp
[213] Delimiter: '('
[213] Identifier: airplane_x
[213] Special symbol: ','
[213] Literal int: 0
[213] Special symbol: ','
[213] Literal int: 2000
[213] Delimiter: ')'
[213] Special symbol: ';'
[214] Identifier: airplane_y
[214] Operator: =
[214] Identifier: clamp
[214] Delimiter: '('
[214] Identifier: airplane_y
[214] Special symbol: ','
[214] Literal int: 0
[214] Special symbol: ','
[214] Literal int: 2000
[214] Delimiter: ')'
[214] Special symbol: ';'
[217] Identifier: camera_x
[217] Operator: =
[217] Identifier: airplane_x
[217] Operator: -
[217] Delimiter: '('
[217] Literal int: 640
[217] Operator: /
[217] Literal int: 2
[217] Delimiter: ')'
[217] Special symbol: ';'
[218] Identifier: camera_y
[218] Operator: =
[218] Identifier: airplane_y
[218] Operator: -
[218] Delimiter: '('
[218] Literal int: 360
[218] Operator: /
[218] Literal int: 2
[218] Delimiter: ')'
[218] Special symbol: ';'
[219] Delimiter: '}'
[221] Keyword: void
[221] Identifier: render_airplane
[221] Delimiter: '('
[221] Delimiter: ')'
[222] Delimiter: '{'
[224] Identifier: render_world
[224] Delimiter: '('
[224] Identifier: camera_x
[224] Special symbol: ','
[224] Identifier: camera_y
[224] Delimiter: ')'
[224] Special symbol: ';'
[227] Identifier: select_texture
[227] Delimiter: '('
[227] Literal int: 0
[227] Delimiter: ')'
[227] Special symbol: ';'
[228] Identifier: select_region
[228] Delimiter: '('
[228] Literal int: 2
[228] Operator: +
[228] Identifier: airplane_frame
[228] Delimiter: ')'
[228] Special symbol: ';'
[229] Identifier: set_multiply_color
[229] Delimiter: '('
[229] Literal int: -2147483648
[229] Delimiter: ')'
[229] Special symbol: ';'
[230] Identifier: set_drawing_scale
[230] Delimiter: '('
[230] Identifier: airplane_scale
[230] Special symbol: ','
[230] Identifier: airplane_scale
[230] Delimiter: ')'
[230] Special symbol: ';'
[231] Identifier: set_drawing_angle
[231] Delimiter: '('
[231] Identifier: airplane_angle
[231] Delimiter: ')'
[231] Special symbol: ';'
[232] Identifier: draw_region_rotozoomed_at
[232] Delimiter: '('
[233] Identifier: airplane_x
[233] Operator: -
[233] Identifier: camera_x
[233] Operator: +
[233] Literal int: 20
[233] Special symbol: ','
[234] Identifier: airplane_y
[234] Operator: -
[234] Identifier: camera_y
[234] Operator: +
[234] Literal int: 20
[234] Delimiter: ')'
[234] Special symbol: ';'
[237] Identifier: set_multiply_color
[237] Delimiter: '('
[237] Literal int: -1
[237] Delimiter: ')'
[237] Special symbol: ';'
[238] Identifier: select_region
[238] Delimiter: '('
[238] Identifier: airplane_frame
[238] Delimiter: ')'
[238] Special symbol: ';'
[239] Identifier: set_drawing_scale
[239] Delimiter: '('
[239] Identifier: airplane_scale
[239] Special symbol: ','
[239] Identifier: airplane_scale
[239] Delimiter: ')'
[239] Special symbol: ';'
[240] Identifier: set_drawing_angle
[240] Delimiter: '('
[240] Identifier: airplane_angle
[240] Delimiter: ')'
[240] Special symbol: ';'
[241] Identifier: draw_region_rotozoomed_at
[241] Delimiter: '('
[241] Identifier: airplane_x
[241] Operator: -
[241] Identifier: camera_x
[241] Special symbol: ','
[241] Identifier: airplane_y
[241] Operator: -
[241] Identifier: camera_y
[241] Delimiter: ')'
[241] Special symbol: ';'
[244] Identifier: render_fuel_gauge
[244] Delimiter: '('
[244] Delimiter: ')'
[244] Special symbol: ';'
[245] Delimiter: '}'

File C:\Vircon32\Vircon32\OceanStorm\dev\include\misc.h:

[24] Keyword: void
[24] Identifier: memset
[24] Delimiter: '('
[24] Keyword: void
[24] Operator: *
[24] Identifier: destination
[24] Special symbol: ','
[24] Keyword: int
[24] Identifier: value
[24] Special symbol: ','
[24] Keyword: int
[24] Identifier: size
[24] Delimiter: ')'
[25] Delimiter: '{'
[26] Keyword: asm
[27] Delimiter: '{'
[28] Literal string: "mov CR, {size}"
[29] Literal string: "mov DR, {destination}"
[30] Literal string: "mov SR, {value}"
[31] Literal string: "sets"
[32] Delimiter: '}'
[33] Delimiter: '}'
[37] Keyword: void
[37] Identifier: memcpy
[37] Delimiter: '('
[37] Keyword: void
[37] Operator: *
[37] Identifier: destination
[37] Special symbol: ','
[37] Keyword: void
[37] Operator: *
[37] Identifier: source
[37] Special symbol: ','
[37] Keyword: int
[37] Identifier: size
[37] Delimiter: ')'
[38] Delimiter: '{'
[39] Keyword: asm
[40] Delimiter: '{'
[41] Literal string: "mov CR, {size}"
[42] Literal string: "mov DR, {destination}"
[43] Literal string: "mov SR, {source}"
[44] Literal string: "movs"
[45] Delimiter: '}'
[46] Delimiter: '}'
[50] Keyword: int
[50] Identifier: memcmp
[50] Delimiter: '('
[50] Keyword: void
[50] Operator: *
[50] Identifier: region1
[50] Special symbol: ','
[50] Keyword: void
[50] Operator: *
[50] Identifier: region2
[50] Special symbol: ','
[50] Keyword: int
[50] Identifier: size
[50] Delimiter: ')'
[51] Delimiter: '{'
[52] Keyword: asm
[53] Delimiter: '{'
[54] Literal string: "mov CR, {size}"
[55] Literal string: "mov DR, {region1}"
[56] Literal string: "mov SR, {region2}"
[57] Literal string: "cmps R0"
[58] Delimiter: '}'
[59] Delimiter: '}'
[74] Keyword: struct
[74] Identifier: malloc_block
[75] Delimiter: '{'
[76] Identifier: malloc_block
[76] Operator: *
[76] Identifier: previous
[76] Special symbol: ';'
[77] Identifier: malloc_block
[77] Operator: *
[77] Identifier: next
[77] Special symbol: ';'
[78] Keyword: int
[78] Identifier: size
[78] Special symbol: ';'
[79] Keyword: bool
[79] Identifier: free
[79] Special symbol: ';'
[80] Delimiter: '}'
[80] Special symbol: ';'
[89] Keyword: void
[89] Operator: *
[89] Identifier: malloc_start_address
[89] Operator: =
[89] Delimiter: '('
[89] Keyword: void
[89] Operator: *
[89] Delimiter: ')'
[89] Delimiter: '('
[89] Literal int: 1
[89] Operator: *
[89] Literal int: 1024
[89] Operator: *
[89] Literal int: 1024
[89] Delimiter: ')'
[89] Special symbol: ';'
[90] Keyword: void
[90] Operator: *
[90] Identifier: malloc_end_address
[90] Operator: =
[90] Delimiter: '('
[90] Keyword: void
[90] Operator: *
[90] Delimiter: ')'
[90] Delimiter: '('
[90] Literal int: 3
[90] Operator: *
[90] Literal int: 1024
[90] Operator: *
[90] Literal int: 1024
[90] Operator: -
[90] Literal int: 1
[90] Delimiter: ')'
[90] Special symbol: ';'
[94] Identifier: malloc_block
[94] Operator: *
[94] Identifier: malloc_first_block
[94] Operator: =
[94] Keyword: NULL
[94] Special symbol: ';'
[104] Keyword: void
[104] Identifier: merge_free_malloc_blocks
[104] Delimiter: '('
[104] Identifier: malloc_block
[104] Operator: *
[104] Identifier: block
[104] Delimiter: ')'
[105] Delimiter: '{'
[107] Identifier: malloc_block
[107] Operator: *
[107] Identifier: previous_block
[107] Operator: =
[107] Identifier: block
[107] Operator: ->
[107] Identifier: previous
[107] Special symbol: ';'
[108] Identifier: malloc_block
[108] Operator: *
[108] Identifier: next_block
[108] Operator: =
[108] Identifier: block
[108] Operator: ->
[108] Identifier: next
[108] Special symbol: ';'
[111] Keyword: if
[111] Delimiter: '('
[111] Identifier: next_block
[111] Operator: &&
[111] Identifier: next_block
[111] Operator: ->
[111] Identifier: free
[111] Delimiter: ')'
[112] Delimiter: '{'
[114] Identifier: block
[114] Operator: ->
[114] Identifier: next
[114] Operator: =
[114] Identifier: next_block
[114] Operator: ->
[114] Identifier: next
[114] Special symbol: ';'
[116] Keyword: if
[116] Delimiter: '('
[116] Identifier: next_block
[116] Operator: ->
[116] Identifier: next
[116] Delimiter: ')'
[117] Identifier: next_block
[117] Operator: ->
[117] Identifier: next
[117] Operator: ->
[117] Identifier: previous
[117] Operator: =
[117] Identifier: block
[117] Special symbol: ';'
[120] Identifier: block
[120] Operator: ->
[120] Identifier: size
[120] Operator: +=
[120] Identifier: next_block
[120] Operator: ->
[120] Identifier: size
[120] Operator: +
[120] Keyword: sizeof
[120] Delimiter: '('
[120] Identifier: malloc_block
[120] Delimiter: ')'
[120] Special symbol: ';'
[124] Identifier: next_block
[124] Operator: =
[124] Identifier: block
[124] Operator: ->
[124] Identifier: next
[124] Special symbol: ';'
[125] Delimiter: '}'
[129] Keyword: if
[129] Delimiter: '('
[129] Identifier: previous_block
[129] Operator: &&
[129] Identifier: previous_block
[129] Operator: ->
[129] Identifier: free
[129] Delimiter: ')'
[130] Delimiter: '{'
[132] Identifier: previous_block
[132] Operator: ->
[132] Identifier: next
[132] Operator: =
[132] Identifier: next_block
[132] Special symbol: ';'
[134] Keyword: if
[134] Delimiter: '('
[134] Identifier: next_block
[134] Delimiter: ')'
[135] Identifier: next_block
[135] Operator: ->
[135] Identifier: previous
[135] Operator: =
[135] Identifier: previous_block
[135] Special symbol: ';'
[138] Identifier: previous_block
[138] Operator: ->
[138] Identifier: size
[138] Operator: +=
[138] Identifier: block
[138] Operator: ->
[138] Identifier: size
[138] Operator: +
[138] Keyword: sizeof
[138] Delimiter: '('
[138] Identifier: malloc_block
[138] Delimiter: ')'
[138] Special symbol: ';'
[139] Delimiter: '}'
[140] Delimiter: '}'
[147] Keyword: void
[147] Identifier: reduce_malloc_block
[147] Delimiter: '('
[147] Identifier: malloc_block
[147] Operator: *
[147] Identifier: block
[147] Special symbol: ','
[147] Keyword: int
[147] Identifier: new_size
[147] Delimiter: ')'
[148] Delimiter: '{'
[150] Keyword: int
[150] Identifier: reduced_size
[150] Operator: =
[150] Identifier: block
[150] Operator: ->
[150] Identifier: size
[150] Operator: -
[150] Identifier: new_size
[150] Special symbol: ';'
[152] Keyword: if
[152] Delimiter: '('
[152] Identifier: reduced_size
[152] Operator: <=
[152] Keyword: sizeof
[152] Delimiter: '('
[152] Identifier: malloc_block
[152] Delimiter: ')'
[152] Delimiter: ')'
[153] Keyword: return
[153] Special symbol: ';'
[157] Identifier: malloc_block
[157] Operator: *
[157] Identifier: freed_block
[157] Operator: =
[157] Delimiter: '('
[157] Identifier: malloc_block
[157] Operator: *
[157] Delimiter: ')'
[157] Delimiter: '('
[157] Delimiter: '('
[157] Keyword: int
[157] Operator: *
[157] Delimiter: ')'
[157] Delimiter: '('
[157] Identifier: block
[157] Operator: +
[157] Literal int: 1
[157] Delimiter: ')'
[157] Operator: +
[157] Identifier: new_size
[157] Delimiter: ')'
[157] Special symbol: ';'
[158] Identifier: freed_block
[158] Operator: ->
[158] Identifier: previous
[158] Operator: =
[158] Identifier: block
[158] Special symbol: ';'
[159] Identifier: freed_block
[159] Operator: ->
[159] Identifier: next
[159] Operator: =
[159] Identifier: block
[159] Operator: ->
[159] Identifier: next
[159] Special symbol: ';'
[160] Identifier: freed_block
[160] Operator: ->
[160] Identifier: free
[160] Operator: =
[160] Literal bool: true
[160] Special symbol: ';'
[161] Identifier: freed_block
[161] Operator: ->
[161] Identifier: size
[161] Operator: =
[161] Identifier: reduced_size
[161] Operator: -
[161] Keyword: sizeof
[161] Delimiter: '('
[161] Identifier: malloc_block
[161] Delimiter: ')'
[161] Special symbol: ';'
[164] Identifier: block
[164] Operator: ->
[164] Identifier: size
[164] Operator: =
[164] Identifier: new_size
[164] Special symbol: ';'
[165] Identifier: block
[165] Operator: ->
[165] Identifier: next
[165] Operator: =
[165] Identifier: freed_block
[165] Special symbol: ';'
[167] Keyword: if
[167] Delimiter: '('
[167] Identifier: freed_block
[167] Operator: ->
[167] Identifier: next
[167] Delimiter: ')'
[168] Identifier: freed_block
[168] Operator: ->
[168] Identifier: next
[168] Operator: ->
[168] Identifier: previous
[168] Operator: =
[168] Identifier: freed_block
[168] Special symbol: ';'
[171] Identifier: merge_free_malloc_blocks
[171] Delimiter: '('
[171] Identifier: freed_block
[171] Delimiter: ')'
[171] Special symbol: ';'
[172] Delimiter: '}'
[179] Keyword: bool
[179] Identifier: expand_malloc_block
[179] Delimiter: '('
[179] Identifier: malloc_block
[179] Operator: *
[179] Identifier: block
[179] Special symbol: ','
[179] Keyword: int
[179] Identifier: new_size
[179] Delimiter: ')'
[180] Delimiter: '{'
[181] Keyword: int
[181] Identifier: increased_size
[181] Operator: =
[181] Identifier: new_size
[181] Operator: -
[181] Identifier: block
[181] Operator: ->
[181] Identifier: size
[181] Special symbol: ';'
[182] Keyword: if
[182] Delimiter: '('
[182] Identifier: increased_size
[182] Operator: <=
[182] Literal int: 0
[182] Delimiter: ')'
[182] Keyword: return
[182] Literal bool: true
[182] Special symbol: ';'
[185] Identifier: malloc_block
[185] Operator: *
[185] Identifier: next_block
[185] Operator: =
[185] Identifier: block
[185] Operator: ->
[185] Identifier: next
[185] Special symbol: ';'
[186] Keyword: if
[186] Delimiter: '('
[186] Operator: !
[186] Identifier: next_block
[186] Operator: ||
[186] Operator: !
[186] Identifier: next_block
[186] Operator: ->
[186] Identifier: free
[186] Delimiter: ')'
[186] Keyword: return
[186] Literal bool: false
[186] Special symbol: ';'
[189] Keyword: int
[189] Identifier: usable_size
[189] Operator: =
[189] Identifier: next_block
[189] Operator: ->
[189] Identifier: size
[189] Operator: +
[189] Keyword: sizeof
[189] Delimiter: '('
[189] Identifier: malloc_block
[189] Delimiter: ')'
[189] Special symbol: ';'
[190] Keyword: if
[190] Delimiter: '('
[190] Identifier: usable_size
[190] Operator: <
[190] Identifier: increased_size
[190] Delimiter: ')'
[190] Keyword: return
[190] Literal bool: false
[190] Special symbol: ';'
[194] Identifier: block
[194] Operator: ->
[194] Identifier: size
[194] Operator: +=
[194] Identifier: usable_size
[194] Special symbol: ';'
[195] Identifier: block
[195] Operator: ->
[195] Identifier: next
[195] Operator: =
[195] Identifier: next_block
[195] Operator: ->
[195] Identifier: next
[195] Special symbol: ';'
[197] Keyword: if
[197] Delimiter: '('
[197] Identifier: next_block
[197] Operator: ->
[197] Identifier: next
[197] Delimiter: ')'
[198] Identifier: next_block
[198] Operator: ->
[198] Identifier: next
[198] Operator: ->
[198] Identifier: previous
[198] Operator: =
[198] Identifier: block
[198] Special symbol: ';'
[202] Identifier: reduce_malloc_block
[202] Delimiter: '('
[202] Identifier: block
[202] Special symbol: ','
[202] Identifier: new_size
[202] Delimiter: ')'
[202] Special symbol: ';'
[203] Keyword: return
[203] Literal bool: true
[203] Special symbol: ';'
[204] Delimiter: '}'
[214] Keyword: void
[214] Operator: *
[214] Identifier: malloc
[214] Delimiter: '('
[214] Keyword: int
[214] Identifier: size
[214] Delimiter: ')'
[215] Delimiter: '{'
[218] Keyword: if
[218] Delimiter: '('
[218] Operator: !
[218] Identifier: malloc_first_block
[218] Delimiter: ')'
[219] Delimiter: '{'
[220] Identifier: malloc_first_block
[220] Operator: =
[220] Delimiter: '('
[220] Identifier: malloc_block
[220] Operator: *
[220] Delimiter: ')'
[220] Identifier: malloc_start_address
[220] Special symbol: ';'
[221] Identifier: malloc_first_block
[221] Operator: ->
[221] Identifier: size
[221] Operator: =
[221] Delimiter: '('
[221] Delimiter: '('
[221] Keyword: int
[221] Operator: *
[221] Delimiter: ')'
[221] Identifier: malloc_end_address
[221] Operator: -
[221] Delimiter: '('
[221] Keyword: int
[221] Operator: *
[221] Delimiter: ')'
[221] Identifier: malloc_start_address
[221] Operator: +
[221] Literal int: 1
[221] Delimiter: ')'
[221] Special symbol: ';'
[222] Identifier: malloc_first_block
[222] Operator: ->
[222] Identifier: size
[222] Operator: -=
[222] Keyword: sizeof
[222] Delimiter: '('
[222] Identifier: malloc_block
[222] Delimiter: ')'
[222] Special symbol: ';'
[223] Identifier: malloc_first_block
[223] Operator: ->
[223] Identifier: previous
[223] Operator: =
[223] Keyword: NULL
[223] Special symbol: ';'
[224] Identifier: malloc_first_block
[224] Operator: ->
[224] Identifier: next
[224] Operator: =
[224] Keyword: NULL
[224] Special symbol: ';'
[225] Identifier: malloc_first_block
[225] Operator: ->
[225] Identifier: free
[225] Operator: =
[225] Literal bool: true
[225] Special symbol: ';'
[226] Delimiter: '}'
[229] Keyword: if
[229] Delimiter: '('
[229] Identifier: size
[229] Operator: <=
[229] Literal int: 0
[229] Delimiter: ')'
[229] Keyword: return
[229] Keyword: NULL
[229] Special symbol: ';'
[232] Identifier: malloc_block
[232] Operator: *
[232] Identifier: current_block
[232] Operator: =
[232] Identifier: malloc_first_block
[232] Special symbol: ';'
[234] Keyword: while
[234] Delimiter: '('
[234] Identifier: current_block
[234] Delimiter: ')'
[235] Delimiter: '{'
[236] Keyword: if
[236] Delimiter: '('
[236] Identifier: current_block
[236] Operator: ->
[236] Identifier: free
[236] Operator: &&
[236] Identifier: current_block
[236] Operator: ->
[236] Identifier: size
[236] Operator: >=
[236] Identifier: size
[236] Delimiter: ')'
[237] Keyword: break
[237] Special symbol: ';'
[239] Identifier: current_block
[239] Operator: =
[239] Identifier: current_block
[239] Operator: ->
[239] Identifier: next
[239] Special symbol: ';'
[240] Delimiter: '}'
[243] Keyword: if
[243] Delimiter: '('
[243] Operator: !
[243] Identifier: current_block
[243] Delimiter: ')'
[243] Keyword: return
[243] Keyword: NULL
[243] Special symbol: ';'
[247] Keyword: int
[247] Identifier: split_size
[247] Operator: =
[247] Identifier: size
[247] Operator: +
[247] Keyword: sizeof
[247] Delimiter: '('
[247] Identifier: malloc_block
[247] Delimiter: ')'
[247] Special symbol: ';'
[249] Keyword: if
[249] Delimiter: '('
[249] Identifier: current_block
[249] Operator: ->
[249] Identifier: size
[249] Operator: >
[249] Identifier: split_size
[249] Delimiter: ')'
[250] Delimiter: '{'
[252] Identifier: malloc_block
[252] Operator: *
[252] Identifier: new_block
[252] Operator: =
[252] Delimiter: '('
[252] Identifier: malloc_block
[252] Operator: *
[252] Delimiter: ')'
[252] Delimiter: '('
[252] Delimiter: '('
[252] Keyword: int
[252] Operator: *
[252] Delimiter: ')'
[252] Delimiter: '('
[252] Identifier: current_block
[252] Operator: +
[252] Literal int: 1
[252] Delimiter: ')'
[252] Operator: +
[252] Identifier: current_block
[252] Operator: ->
[252] Identifier: size
[252] Operator: -
[252] Identifier: split_size
[252] Delimiter: ')'
[252] Special symbol: ';'
[253] Identifier: new_block
[253] Operator: ->
[253] Identifier: size
[253] Operator: =
[253] Identifier: size
[253] Special symbol: ';'
[254] Identifier: new_block
[254] Operator: ->
[254] Identifier: free
[254] Operator: =
[254] Literal bool: false
[254] Special symbol: ';'
[255] Identifier: new_block
[255] Operator: ->
[255] Identifier: previous
[255] Operator: =
[255] Identifier: current_block
[255] Special symbol: ';'
[256] Identifier: new_block
[256] Operator: ->
[256] Identifier: next
[256] Operator: =
[256] Identifier: current_block
[256] Operator: ->
[256] Identifier: next
[256] Special symbol: ';'
[259] Identifier: current_block
[259] Operator: ->
[259] Identifier: size
[259] Operator: -=
[259] Identifier: split_size
[259] Special symbol: ';'
[260] Identifier: current_block
[260] Operator: ->
[260] Identifier: next
[260] Operator: =
[260] Identifier: new_block
[260] Special symbol: ';'
[262] Keyword: if
[262] Delimiter: '('
[262] Identifier: new_block
[262] Operator: ->
[262] Identifier: next
[262] Delimiter: ')'
[263] Identifier: new_block
[263] Operator: ->
[263] Identifier: next
[263] Operator: ->
[263] Identifier: previous
[263] Operator: =
[263] Identifier: new_block
[263] Special symbol: ';'
[266] Keyword: return
[266] Delimiter: '('
[266] Identifier: new_block
[266] Operator: +
[266] Literal int: 1
[266] Delimiter: ')'
[266] Special symbol: ';'
[267] Delimiter: '}'
[271] Keyword: else
[272] Delimiter: '{'
[273] Identifier: current_block
[273] Operator: ->
[273] Identifier: free
[273] Operator: =
[273] Literal bool: false
[273] Special symbol: ';'
[274] Keyword: return
[274] Delimiter: '('
[274] Identifier: current_block
[274] Operator: +
[274] Literal int: 1
[274] Delimiter: ')'
[274] Special symbol: ';'
[275] Delimiter: '}'
[276] Delimiter: '}'
[283] Keyword: void
[283] Identifier: free
[283] Delimiter: '('
[283] Keyword: void
[283] Operator: *
[283] Identifier: ptr
[283] Delimiter: ')'
[284] Delimiter: '{'
[286] Keyword: if
[286] Delimiter: '('
[286] Operator: !
[286] Identifier: ptr
[286] Delimiter: ')'
[286] Keyword: return
[286] Special symbol: ';'
[289] Identifier: malloc_block
[289] Operator: *
[289] Identifier: freed_block
[289] Operator: =
[289] Delimiter: '('
[289] Identifier: malloc_block
[289] Operator: *
[289] Delimiter: ')'
[289] Identifier: ptr
[289] Operator: -
[289] Literal int: 1
[289] Special symbol: ';'
[290] Identifier: freed_block
[290] Operator: ->
[290] Identifier: free
[290] Operator: =
[290] Literal bool: true
[290] Special symbol: ';'
[294] Identifier: merge_free_malloc_blocks
[294] Delimiter: '('
[294] Identifier: freed_block
[294] Delimiter: ')'
[294] Special symbol: ';'
[295] Delimiter: '}'
[301] Keyword: void
[301] Operator: *
[301] Identifier: calloc
[301] Delimiter: '('
[301] Keyword: int
[301] Identifier: number
[301] Special symbol: ','
[301] Keyword: int
[301] Identifier: size
[301] Delimiter: ')'
[302] Delimiter: '{'
[304] Keyword: int
[304] Identifier: total_size
[304] Operator: =
[304] Identifier: number
[304] Operator: *
[304] Identifier: size
[304] Special symbol: ';'
[305] Keyword: void
[305] Operator: *
[305] Identifier: allocated_memory
[305] Operator: =
[305] Identifier: malloc
[305] Delimiter: '('
[305] Identifier: total_size
[305] Delimiter: ')'
[305] Special symbol: ';'
[308] Keyword: if
[308] Delimiter: '('
[308] Operator: !
[308] Identifier: allocated_memory
[308] Delimiter: ')'
[308] Keyword: return
[308] Keyword: NULL
[308] Special symbol: ';'
[311] Identifier: memset
[311] Delimiter: '('
[311] Identifier: allocated_memory
[311] Special symbol: ','
[311] Literal int: 0
[311] Special symbol: ','
[311] Identifier: total_size
[311] Delimiter: ')'
[311] Special symbol: ';'
[312] Keyword: return
[312] Identifier: allocated_memory
[312] Special symbol: ';'
[313] Delimiter: '}'
[322] Keyword: void
[322] Operator: *
[322] Identifier: realloc
[322] Delimiter: '('
[322] Keyword: void
[322] Operator: *
[322] Identifier: ptr
[322] Special symbol: ','
[322] Keyword: int
[322] Identifier: size
[322] Delimiter: ')'
[323] Delimiter: '{'
[325] Keyword: if
[325] Delimiter: '('
[325] Operator: !
[325] Identifier: ptr
[325] Delimiter: ')'
[325] Keyword: return
[325] Identifier: malloc
[325] Delimiter: '('
[325] Identifier: size
[325] Delimiter: ')'
[325] Special symbol: ';'
[328] Keyword: if
[328] Delimiter: '('
[328] Identifier: size
[328] Operator: <=
[328] Literal int: 0
[328] Delimiter: ')'
[329] Delimiter: '{'
[330] Identifier: free
[330] Delimiter: '('
[330] Identifier: ptr
[330] Delimiter: ')'
[330] Special symbol: ';'
[331] Keyword: return
[331] Keyword: NULL
[331] Special symbol: ';'
[332] Delimiter: '}'
[336] Identifier: malloc_block
[336] Operator: *
[336] Identifier: current_block
[336] Operator: =
[336] Delimiter: '('
[336] Identifier: malloc_block
[336] Operator: *
[336] Delimiter: ')'
[336] Identifier: ptr
[336] Operator: -
[336] Literal int: 1
[336] Special symbol: ';'
[337] Keyword: int
[337] Identifier: previous_size
[337] Operator: =
[337] Identifier: current_block
[337] Operator: ->
[337] Identifier: size
[337] Special symbol: ';'
[340] Keyword: if
[340] Delimiter: '('
[340] Identifier: size
[340] Operator: ==
[340] Identifier: previous_size
[340] Delimiter: ')'
[341] Keyword: return
[341] Identifier: ptr
[341] Special symbol: ';'
[344] Keyword: if
[344] Delimiter: '('
[344] Identifier: size
[344] Operator: <
[344] Identifier: previous_size
[344] Delimiter: ')'
[345] Delimiter: '{'
[348] Identifier: reduce_malloc_block
[348] Delimiter: '('
[348] Identifier: current_block
[348] Special symbol: ','
[348] Identifier: size
[348] Delimiter: ')'
[348] Special symbol: ';'
[349] Keyword: return
[349] Identifier: ptr
[349] Special symbol: ';'
[350] Delimiter: '}'
[353] Keyword: else
[354] Delimiter: '{'
[357] Keyword: if
[357] Delimiter: '('
[357] Identifier: expand_malloc_block
[357] Delimiter: '('
[357] Identifier: current_block
[357] Special symbol: ','
[357] Identifier: size
[357] Delimiter: ')'
[357] Delimiter: ')'
[358] Keyword: return
[358] Identifier: ptr
[358] Special symbol: ';'
[362] Keyword: else
[363] Delimiter: '{'
[366] Keyword: void
[366] Operator: *
[366] Identifier: new_ptr
[366] Operator: =
[366] Identifier: malloc
[366] Delimiter: '('
[366] Identifier: size
[366] Delimiter: ')'
[366] Special symbol: ';'
[367] Keyword: if
[367] Delimiter: '('
[367] Operator: !
[367] Identifier: new_ptr
[367] Delimiter: ')'
[367] Keyword: return
[367] Keyword: NULL
[367] Special symbol: ';'
[370] Identifier: memcpy
[370] Delimiter: '('
[370] Identifier: new_ptr
[370] Special symbol: ','
[370] Identifier: ptr
[370] Special symbol: ','
[370] Identifier: previous_size
[370] Delimiter: ')'
[370] Special symbol: ';'
[373] Identifier: free
[373] Delimiter: '('
[373] Identifier: ptr
[373] Delimiter: ')'
[373] Special symbol: ';'
[374] Keyword: return
[374] Identifier: new_ptr
[374] Special symbol: ';'
[375] Delimiter: '}'
[376] Delimiter: '}'
[377] Delimiter: '}'
[385] Keyword: int
[385] Identifier: rand
[385] Delimiter: '('
[385] Delimiter: ')'
[386] Delimiter: '{'
[387] Keyword: asm
[388] Delimiter: '{'
[389] Literal string: "in R0, RNG_CurrentValue"
[390] Delimiter: '}'
[391] Delimiter: '}'
[397] Keyword: void
[397] Identifier: srand
[397] Delimiter: '('
[397] Keyword: int
[397] Identifier: seed
[397] Delimiter: ')'
[398] Delimiter: '{'
[399] Keyword: asm
[400] Delimiter: '{'
[401] Literal string: "mov R0, {seed}"
[402] Literal string: "out RNG_CurrentValue, R0"
[403] Delimiter: '}'
[404] Delimiter: '}'
[414] Keyword: void
[414] Identifier: exit
[414] Delimiter: '('
[414] Delimiter: ')'
[415] Delimiter: '{'
[416] Keyword: asm
[417] Delimiter: '{'
[418] Literal string: "hlt"
[419] Delimiter: '}'
[420] Delimiter: '}'

File src\\game/island.c:

[9] Keyword: float
[9] Delimiter: '['
[9] Literal int: 10
[9] Delimiter: ']'
[9] Identifier: island_x
[9] Special symbol: ';'
[10] Keyword: float
[10] Delimiter: '['
[10] Literal int: 10
[10] Delimiter: ']'
[10] Identifier: island_y
[10] Special symbol: ';'
[11] Keyword: int
[11] Delimiter: '['
[11] Literal int: 10
[11] Delimiter: ']'
[11] Delimiter: '['
[11] Literal int: 4
[11] Delimiter: ']'
[11] Delimiter: '['
[11] Literal int: 3
[11] Delimiter: ']'
[11] Identifier: island_tiles
[11] Special symbol: ';'
[12] Keyword: int
[12] Identifier: num_islands
[12] Special symbol: ';'
[14] Keyword: int
[14] Identifier: get_tile
[14] Delimiter: '('
[14] Keyword: int
[14] Identifier: island_index
[14] Special symbol: ','
[14] Keyword: int
[14] Identifier: x
[14] Special symbol: ','
[14] Keyword: int
[14] Identifier: y
[14] Delimiter: ')'
[14] Delimiter: '{'
[15] Keyword: if
[15] Delimiter: '('
[15] Identifier: x
[15] Operator: <
[15] Literal int: 0
[15] Operator: ||
[15] Identifier: x
[15] Operator: >=
[15] Literal int: 4
[15] Operator: ||
[15] Identifier: y
[15] Operator: <
[15] Literal int: 0
[15] Operator: ||
[15] Identifier: y
[15] Operator: >=
[15] Literal int: 3
[15] Delimiter: ')'
[15] Delimiter: '{'
[16] Keyword: return
[16] Literal int: 0
[16] Special symbol: ';'
[17] Delimiter: '}'
[18] Keyword: return
[18] Identifier: island_tiles
[18] Delimiter: '['
[18] Identifier: island_index
[18] Delimiter: ']'
[18] Delimiter: '['
[18] Identifier: x
[18] Delimiter: ']'
[18] Delimiter: '['
[18] Identifier: y
[18] Delimiter: ']'
[18] Special symbol: ';'
[19] Delimiter: '}'
[21] Keyword: void
[21] Identifier: generate_island_layout
[21] Delimiter: '('
[21] Keyword: int
[21] Identifier: island_index
[21] Delimiter: ')'
[21] Delimiter: '{'
[22] Keyword: int
[22] Identifier: center_x
[22] Operator: =
[22] Literal int: 4
[22] Operator: /
[22] Literal int: 2
[22] Special symbol: ';'
[23] Keyword: int
[23] Identifier: center_y
[23] Operator: =
[23] Literal int: 3
[23] Operator: /
[23] Literal int: 2
[23] Special symbol: ';'
[24] Keyword: int
[24] Identifier: radius
[24] Operator: =
[24] Literal int: 2
[24] Operator: +
[24] Delimiter: '('
[24] Identifier: rand
[24] Delimiter: '('
[24] Delimiter: ')'
[24] Operator: %
[24] Literal int: 3
[24] Delimiter: ')'
[24] Special symbol: ';'
[27] Keyword: for
[27] Delimiter: '('
[27] Keyword: int
[27] Identifier: y
[27] Operator: =
[27] Literal int: 0
[27] Special symbol: ';'
[27] Identifier: y
[27] Operator: <
[27] Literal int: 3
[27] Special symbol: ';'
[27] Identifier: y
[27] Operator: ++
[27] Delimiter: ')'
[27] Delimiter: '{'
[28] Keyword: for
[28] Delimiter: '('
[28] Keyword: int
[28] Identifier: x
[28] Operator: =
[28] Literal int: 0
[28] Special symbol: ';'
[28] Identifier: x
[28] Operator: <
[28] Literal int: 4
[28] Special symbol: ';'
[28] Identifier: x
[28] Operator: ++
[28] Delimiter: ')'
[28] Delimiter: '{'
[29] Identifier: island_tiles
[29] Delimiter: '['
[29] Identifier: island_index
[29] Delimiter: ']'
[29] Delimiter: '['
[29] Identifier: x
[29] Delimiter: ']'
[29] Delimiter: '['
[29] Identifier: y
[29] Delimiter: ']'
[29] Operator: =
[29] Literal int: 0
[29] Special symbol: ';'
[30] Delimiter: '}'
[31] Delimiter: '}'
[34] Keyword: for
[34] Delimiter: '('
[34] Keyword: int
[34] Identifier: y
[34] Operator: =
[34] Identifier: center_y
[34] Operator: -
[34] Identifier: radius
[34] Special symbol: ';'
[34] Identifier: y
[34] Operator: <=
[34] Identifier: center_y
[34] Operator: +
[34] Identifier: radius
[34] Special symbol: ';'
[34] Identifier: y
[34] Operator: ++
[34] Delimiter: ')'
[34] Delimiter: '{'
[35] Keyword: for
[35] Delimiter: '('
[35] Keyword: int
[35] Identifier: x
[35] Operator: =
[35] Identifier: center_x
[35] Operator: -
[35] Identifier: radius
[35] Special symbol: ';'
[35] Identifier: x
[35] Operator: <=
[35] Identifier: center_x
[35] Operator: +
[35] Identifier: radius
[35] Special symbol: ';'
[35] Identifier: x
[35] Operator: ++
[35] Delimiter: ')'
[35] Delimiter: '{'
[36] Keyword: if
[36] Delimiter: '('
[36] Identifier: x
[36] Operator: >=
[36] Literal int: 0
[36] Operator: &&
[36] Identifier: x
[36] Operator: <
[36] Literal int: 4
[36] Operator: &&
[36] Identifier: y
[36] Operator: >=
[36] Literal int: 0
[36] Operator: &&
[36] Identifier: y
[36] Operator: <
[36] Literal int: 3
[36] Delimiter: ')'
[36] Delimiter: '{'
[37] Keyword: int
[37] Identifier: dx
[37] Operator: =
[37] Identifier: x
[37] Operator: -
[37] Identifier: center_x
[37] Special symbol: ';'
[38] Keyword: int
[38] Identifier: dy
[38] Operator: =
[38] Identifier: y
[38] Operator: -
[38] Identifier: center_y
[38] Special symbol: ';'
[39] Keyword: if
[39] Delimiter: '('
[39] Identifier: dx
[39] Operator: *
[39] Identifier: dx
[39] Operator: +
[39] Identifier: dy
[39] Operator: *
[39] Identifier: dy
[39] Operator: <=
[39] Identifier: radius
[39] Operator: *
[39] Identifier: radius
[39] Operator: +
[39] Delimiter: '('
[39] Identifier: rand
[39] Delimiter: '('
[39] Delimiter: ')'
[39] Operator: %
[39] Literal int: 2
[39] Delimiter: ')'
[39] Delimiter: ')'
[39] Delimiter: '{'
[40] Identifier: island_tiles
[40] Delimiter: '['
[40] Identifier: island_index
[40] Delimiter: ']'
[40] Delimiter: '['
[40] Identifier: x
[40] Delimiter: ']'
[40] Delimiter: '['
[40] Identifier: y
[40] Delimiter: ']'
[40] Operator: =
[40] Literal int: 1
[40] Special symbol: ';'
[41] Delimiter: '}'
[42] Delimiter: '}'
[43] Delimiter: '}'
[44] Delimiter: '}'
[45] Delimiter: '}'
[47] Keyword: void
[47] Identifier: initialize_islands
[47] Delimiter: '('
[47] Delimiter: ')'
[47] Delimiter: '{'
[48] Identifier: srand
[48] Delimiter: '('
[48] Identifier: get_time
[48] Delimiter: '('
[48] Delimiter: ')'
[48] Delimiter: ')'
[48] Special symbol: ';'
[50] Identifier: select_texture
[50] Delimiter: '('
[50] Literal int: 2
[50] Delimiter: ')'
[50] Special symbol: ';'
[51] Identifier: select_region
[51] Delimiter: '('
[51] Literal int: 1
[51] Delimiter: ')'
[51] Special symbol: ';'
[52] Identifier: define_region
[52] Delimiter: '('
[52] Literal int: 0
[52] Special symbol: ','
[52] Literal int: 0
[52] Special symbol: ','
[52] Literal int: 64
[52] Special symbol: ','
[52] Literal int: 64
[52] Special symbol: ','
[52] Literal int: 64
[52] Operator: /
[52] Literal int: 2
[52] Special symbol: ','
[52] Literal int: 64
[52] Operator: /
[52] Literal int: 2
[52] Delimiter: ')'
[52] Special symbol: ';'
[54] Identifier: num_islands
[54] Operator: =
[54] Literal int: 10
[54] Special symbol: ';'
[56] Keyword: float
[56] Identifier: safe_radius
[56] Operator: =
[56] Literal int: 64
[56] Operator: *
[56] Literal int: 4
[56] Operator: *
[56] Literal int: 2
[56] Special symbol: ';'
[57] Keyword: float
[57] Identifier: carrier_safe_zone
[57] Operator: =
[57] Literal int: 500
[57] Special symbol: ';'
[59] Keyword: for
[59] Delimiter: '('
[59] Keyword: int
[59] Identifier: i
[59] Operator: =
[59] Literal int: 0
[59] Special symbol: ';'
[59] Identifier: i
[59] Operator: <
[59] Identifier: num_islands
[59] Special symbol: ';'
[59] Identifier: i
[59] Operator: ++
[59] Delimiter: ')'
[59] Delimiter: '{'
[60] Keyword: bool
[60] Identifier: valid_position
[60] Operator: =
[60] Literal bool: false
[60] Special symbol: ';'
[61] Keyword: float
[61] Identifier: x
[61] Special symbol: ','
[61] Identifier: y
[61] Special symbol: ';'
[63] Keyword: while
[63] Delimiter: '('
[63] Operator: !
[63] Identifier: valid_position
[63] Delimiter: ')'
[63] Delimiter: '{'
[64] Identifier: x
[64] Operator: =
[64] Identifier: rand
[64] Delimiter: '('
[64] Delimiter: ')'
[64] Operator: %
[64] Delimiter: '('
[64] Keyword: int
[64] Delimiter: ')'
[64] Delimiter: '('
[64] Literal int: 2000
[64] Operator: *
[64] Literal float: 0.800000
[64] Delimiter: ')'
[64] Special symbol: ';'
[65] Identifier: y
[65] Operator: =
[65] Identifier: rand
[65] Delimiter: '('
[65] Delimiter: ')'
[65] Operator: %
[65] Delimiter: '('
[65] Keyword: int
[65] Delimiter: ')'
[65] Delimiter: '('
[65] Literal int: 2000
[65] Operator: *
[65] Literal float: 0.800000
[65] Delimiter: ')'
[65] Special symbol: ';'
[68] Keyword: float
[68] Identifier: dx
[68] Operator: =
[68] Identifier: x
[68] Operator: -
[68] Delimiter: '('
[68] Literal int: 2000
[68] Operator: /
[68] Literal int: 2
[68] Delimiter: ')'
[68] Special symbol: ';'
[69] Keyword: float
[69] Identifier: dy
[69] Operator: =
[69] Identifier: y
[69] Operator: -
[69] Delimiter: '('
[69] Literal int: 2000
[69] Operator: /
[69] Literal int: 2
[69] Delimiter: ')'
[69] Special symbol: ';'
[70] Keyword: float
[70] Identifier: carrier_dist
[70] Operator: =
[70] Identifier: sqrt
[70] Delimiter: '('
[70] Identifier: dx
[70] Operator: *
[70] Identifier: dx
[70] Operator: +
[70] Identifier: dy
[70] Operator: *
[70] Identifier: dy
[70] Delimiter: ')'
[70] Special symbol: ';'
[73] Keyword: bool
[73] Identifier: too_close
[73] Operator: =
[73] Literal bool: false
[73] Special symbol: ';'
[74] Keyword: for
[74] Delimiter: '('
[74] Keyword: int
[74] Identifier: j
[74] Operator: =
[74] Literal int: 0
[74] Special symbol: ';'
[74] Identifier: j
[74] Operator: <
[74] Identifier: i
[74] Special symbol: ';'
[74] Identifier: j
[74] Operator: ++
[74] Delimiter: ')'
[74] Delimiter: '{'
[75] Identifier: dx
[75] Operator: =
[75] Identifier: x
[75] Operator: -
[75] Identifier: island_x
[75] Delimiter: '['
[75] Identifier: j
[75] Delimiter: ']'
[75] Special symbol: ';'
[76] Identifier: dy
[76] Operator: =
[76] Identifier: y
[76] Operator: -
[76] Identifier: island_y
[76] Delimiter: '['
[76] Identifier: j
[76] Delimiter: ']'
[76] Special symbol: ';'
[77] Keyword: float
[77] Identifier: island_dist
[77] Operator: =
[77] Identifier: sqrt
[77] Delimiter: '('
[77] Identifier: dx
[77] Operator: *
[77] Identifier: dx
[77] Operator: +
[77] Identifier: dy
[77] Operator: *
[77] Identifier: dy
[77] Delimiter: ')'
[77] Special symbol: ';'
[78] Keyword: if
[78] Delimiter: '('
[78] Identifier: island_dist
[78] Operator: <
[78] Identifier: safe_radius
[78] Delimiter: ')'
[78] Delimiter: '{'
[79] Identifier: too_close
[79] Operator: =
[79] Literal bool: true
[79] Special symbol: ';'
[80] Keyword: break
[80] Special symbol: ';'
[81] Delimiter: '}'
[82] Delimiter: '}'
[85] Keyword: if
[85] Delimiter: '('
[85] Identifier: carrier_dist
[85] Operator: >
[85] Identifier: carrier_safe_zone
[85] Operator: &&
[85] Operator: !
[85] Identifier: too_close
[85] Delimiter: ')'
[85] Delimiter: '{'
[86] Identifier: valid_position
[86] Operator: =
[86] Literal bool: true
[86] Special symbol: ';'
[87] Identifier: island_x
[87] Delimiter: '['
[87] Identifier: i
[87] Delimiter: ']'
[87] Operator: =
[87] Identifier: x
[87] Special symbol: ';'
[88] Identifier: island_y
[88] Delimiter: '['
[88] Identifier: i
[88] Delimiter: ']'
[88] Operator: =
[88] Identifier: y
[88] Special symbol: ';'
[89] Delimiter: '}'
[90] Delimiter: '}'
[92] Identifier: generate_island_layout
[92] Delimiter: '('
[92] Identifier: i
[92] Delimiter: ')'
[92] Special symbol: ';'
[93] Delimiter: '}'
[94] Delimiter: '}'
[96] Keyword: void
[96] Identifier: render_islands
[96] Delimiter: '('
[96] Keyword: float
[96] Identifier: camera_x
[96] Special symbol: ','
[96] Keyword: float
[96] Identifier: camera_y
[96] Delimiter: ')'
[96] Delimiter: '{'
[97] Identifier: select_texture
[97] Delimiter: '('
[97] Literal int: 2
[97] Delimiter: ')'
[97] Special symbol: ';'
[99] Keyword: for
[99] Delimiter: '('
[99] Keyword: int
[99] Identifier: i
[99] Operator: =
[99] Literal int: 0
[99] Special symbol: ';'
[99] Identifier: i
[99] Operator: <
[99] Identifier: num_islands
[99] Special symbol: ';'
[99] Identifier: i
[99] Operator: ++
[99] Delimiter: ')'
[99] Delimiter: '{'
[100] Keyword: float
[100] Identifier: base_x
[100] Operator: =
[100] Identifier: island_x
[100] Delimiter: '['
[100] Identifier: i
[100] Delimiter: ']'
[100] Special symbol: ';'
[101] Keyword: float
[101] Identifier: base_y
[101] Operator: =
[101] Identifier: island_y
[101] Delimiter: '['
[101] Identifier: i
[101] Delimiter: ']'
[101] Special symbol: ';'
[104] Keyword: float
[104] Identifier: screen_x
[104] Operator: =
[104] Identifier: base_x
[104] Operator: -
[104] Identifier: camera_x
[104] Special symbol: ';'
[105] Keyword: float
[105] Identifier: screen_y
[105] Operator: =
[105] Identifier: base_y
[105] Operator: -
[105] Identifier: camera_y
[105] Special symbol: ';'
[108] Keyword: if
[108] Delimiter: '('
[108] Identifier: screen_x
[108] Operator: >=
[108] Operator: -
[108] Literal int: 64
[108] Operator: *
[108] Literal int: 4
[108] Operator: &&
[109] Identifier: screen_x
[109] Operator: <=
[109] Literal int: 640
[109] Operator: +
[109] Literal int: 64
[109] Operator: *
[109] Literal int: 4
[109] Operator: &&
[110] Identifier: screen_y
[110] Operator: >=
[110] Operator: -
[110] Literal int: 64
[110] Operator: *
[110] Literal int: 3
[110] Operator: &&
[111] Identifier: screen_y
[111] Operator: <=
[111] Literal int: 360
[111] Operator: +
[111] Literal int: 64
[111] Operator: *
[111] Literal int: 3
[111] Delimiter: ')'
[111] Delimiter: '{'
[114] Keyword: for
[114] Delimiter: '('
[114] Keyword: int
[114] Identifier: y
[114] Operator: =
[114] Literal int: 0
[114] Special symbol: ';'
[114] Identifier: y
[114] Operator: <
[114] Literal int: 3
[114] Special symbol: ';'
[114] Identifier: y
[114] Operator: ++
[114] Delimiter: ')'
[114] Delimiter: '{'
[115] Keyword: for
[115] Delimiter: '('
[115] Keyword: int
[115] Identifier: x
[115] Operator: =
[115] Literal int: 0
[115] Special symbol: ';'
[115] Identifier: x
[115] Operator: <
[115] Literal int: 4
[115] Special symbol: ';'
[115] Identifier: x
[115] Operator: ++
[115] Delimiter: ')'
[115] Delimiter: '{'
[116] Keyword: if
[116] Delimiter: '('
[116] Identifier: island_tiles
[116] Delimiter: '['
[116] Identifier: i
[116] Delimiter: ']'
[116] Delimiter: '['
[116] Identifier: x
[116] Delimiter: ']'
[116] Delimiter: '['
[116] Identifier: y
[116] Delimiter: ']'
[116] Operator: !=
[116] Literal int: 0
[116] Delimiter: ')'
[116] Delimiter: '{'
[117] Keyword: float
[117] Identifier: tile_x
[117] Operator: =
[117] Identifier: base_x
[117] Operator: +
[117] Delimiter: '('
[117] Identifier: x
[117] Operator: *
[117] Literal int: 64
[117] Delimiter: ')'
[117] Operator: -
[117] Identifier: camera_x
[117] Special symbol: ';'
[118] Keyword: float
[118] Identifier: tile_y
[118] Operator: =
[118] Identifier: base_y
[118] Operator: +
[118] Delimiter: '('
[118] Identifier: y
[118] Operator: *
[118] Literal int: 64
[118] Delimiter: ')'
[118] Operator: -
[118] Identifier: camera_y
[118] Special symbol: ';'
[120] Identifier: select_region
[120] Delimiter: '('
[120] Literal int: 1
[120] Delimiter: ')'
[120] Special symbol: ';'
[121] Identifier: draw_region_at
[121] Delimiter: '('
[121] Identifier: tile_x
[121] Special symbol: ','
[121] Identifier: tile_y
[121] Delimiter: ')'
[121] Special symbol: ';'
[122] Delimiter: '}'
[123] Delimiter: '}'
[124] Delimiter: '}'
[125] Delimiter: '}'
[126] Delimiter: '}'
[127] Delimiter: '}'
[129] Keyword: int
[129] Identifier: is_over_island
[129] Delimiter: '('
[129] Keyword: float
[129] Identifier: x
[129] Special symbol: ','
[129] Keyword: float
[129] Identifier: y
[129] Delimiter: ')'
[129] Delimiter: '{'
[130] Keyword: for
[130] Delimiter: '('
[130] Keyword: int
[130] Identifier: i
[130] Operator: =
[130] Literal int: 0
[130] Special symbol: ';'
[130] Identifier: i
[130] Operator: <
[130] Identifier: num_islands
[130] Special symbol: ';'
[130] Identifier: i
[130] Operator: ++
[130] Delimiter: ')'
[130] Delimiter: '{'
[131] Keyword: float
[131] Identifier: local_x
[131] Operator: =
[131] Delimiter: '('
[131] Identifier: x
[131] Operator: -
[131] Identifier: island_x
[131] Delimiter: '['
[131] Identifier: i
[131] Delimiter: ']'
[131] Delimiter: ')'
[131] Operator: /
[131] Literal int: 64
[131] Special symbol: ';'
[132] Keyword: float
[132] Identifier: local_y
[132] Operator: =
[132] Delimiter: '('
[132] Identifier: y
[132] Operator: -
[132] Identifier: island_y
[132] Delimiter: '['
[132] Identifier: i
[132] Delimiter: ']'
[132] Delimiter: ')'
[132] Operator: /
[132] Literal int: 64
[132] Special symbol: ';'
[134] Keyword: if
[134] Delimiter: '('
[134] Identifier: local_x
[134] Operator: >=
[134] Literal int: 0
[134] Operator: &&
[134] Identifier: local_x
[134] Operator: <
[134] Literal int: 4
[134] Operator: &&
[135] Identifier: local_y
[135] Operator: >=
[135] Literal int: 0
[135] Operator: &&
[135] Identifier: local_y
[135] Operator: <
[135] Literal int: 3
[135] Delimiter: ')'
[135] Delimiter: '{'
[136] Keyword: int
[136] Identifier: tile_x
[136] Operator: =
[136] Identifier: local_x
[136] Special symbol: ';'
[137] Keyword: int
[137] Identifier: tile_y
[137] Operator: =
[137] Identifier: local_y
[137] Special symbol: ';'
[138] Keyword: if
[138] Delimiter: '('
[138] Identifier: island_tiles
[138] Delimiter: '['
[138] Identifier: i
[138] Delimiter: ']'
[138] Delimiter: '['
[138] Identifier: tile_x
[138] Delimiter: ']'
[138] Delimiter: '['
[138] Identifier: tile_y
[138] Delimiter: ']'
[138] Operator: !=
[138] Literal int: 0
[138] Delimiter: ')'
[138] Delimiter: '{'
[139] Keyword: return
[139] Literal int: 1
[139] Special symbol: ';'
[140] Delimiter: '}'
[141] Delimiter: '}'
[142] Delimiter: '}'
[143] Keyword: return
[143] Literal int: 0
[143] Special symbol: ';'
[144] Delimiter: '}'

File src\\game/render_system.c:

[8] Keyword: extern
[8] Keyword: float
[8] Delimiter: '['
[8] Literal int: 10
[8] Delimiter: ']'
[8] Identifier: island_x
[8] Special symbol: ';'
[9] Keyword: extern
[9] Keyword: float
[9] Delimiter: '['
[9] Literal int: 10
[9] Delimiter: ']'
[9] Identifier: island_y
[9] Special symbol: ';'
[10] Keyword: extern
[10] Keyword: int
[10] Delimiter: '['
[10] Literal int: 10
[10] Delimiter: ']'
[10] Delimiter: '['
[10] Literal int: 4
[10] Delimiter: ']'
[10] Delimiter: '['
[10] Literal int: 3
[10] Delimiter: ']'
[10] Identifier: island_tiles
[10] Special symbol: ';'
[11] Keyword: extern
[11] Keyword: int
[11] Identifier: num_islands
[11] Special symbol: ';'
[13] Keyword: void
[13] Identifier: initialize_carrier
[13] Delimiter: '('
[13] Delimiter: ')'
[13] Delimiter: '{'
[14] Identifier: select_texture
[14] Delimiter: '('
[14] Literal int: 1
[14] Delimiter: ')'
[14] Special symbol: ';'
[15] Identifier: select_region
[15] Delimiter: '('
[15] Literal int: 0
[15] Delimiter: ')'
[15] Special symbol: ';'
[16] Identifier: define_region
[16] Delimiter: '('
[16] Literal int: 0
[16] Special symbol: ','
[16] Literal int: 0
[16] Special symbol: ','
[16] Literal int: 77
[16] Special symbol: ','
[16] Literal int: 255
[16] Special symbol: ','
[16] Literal int: 77
[16] Operator: /
[16] Literal int: 2
[16] Special symbol: ','
[16] Literal int: 255
[16] Operator: /
[16] Literal int: 2
[16] Delimiter: ')'
[16] Special symbol: ';'
[17] Delimiter: '}'
[19] Keyword: void
[19] Identifier: render_world
[19] Delimiter: '('
[19] Keyword: float
[19] Identifier: camera_x
[19] Special symbol: ','
[19] Keyword: float
[19] Identifier: camera_y
[19] Delimiter: ')'
[19] Delimiter: '{'
[21] Identifier: clear_screen
[21] Delimiter: '('
[21] Literal int: -8368096
[21] Delimiter: ')'
[21] Special symbol: ';'
[24] Identifier: select_texture
[24] Delimiter: '('
[24] Literal int: 1
[24] Delimiter: ')'
[24] Special symbol: ';'
[25] Identifier: select_region
[25] Delimiter: '('
[25] Literal int: 0
[25] Delimiter: ')'
[25] Special symbol: ';'
[26] Identifier: draw_region_at
[26] Delimiter: '('
[26] Delimiter: '('
[26] Literal int: 2000
[26] Operator: /
[26] Literal int: 2
[26] Delimiter: ')'
[26] Operator: -
[26] Identifier: camera_x
[26] Special symbol: ','
[26] Delimiter: '('
[26] Literal int: 2000
[26] Operator: /
[26] Literal int: 2
[26] Delimiter: ')'
[26] Operator: -
[26] Identifier: camera_y
[26] Delimiter: ')'
[26] Special symbol: ';'
[29] Identifier: render_islands
[29] Delimiter: '('
[29] Identifier: camera_x
[29] Special symbol: ','
[29] Identifier: camera_y
[29] Delimiter: ')'
[29] Special symbol: ';'
[30] Delimiter: '}'

File src\\states/menu.c:

[8] Keyword: extern
[8] Keyword: int
[8] Identifier: game_state
[8] Special symbol: ';'
[10] Keyword: void
[10] Identifier: update_menu
[10] Delimiter: '('
[10] Delimiter: ')'
[10] Delimiter: '{'
[12] Keyword: if
[12] Delimiter: '('
[12] Identifier: gamepad_button_start
[12] Delimiter: '('
[12] Delimiter: ')'
[12] Operator: ==
[12] Literal int: 1
[12] Delimiter: ')'
[12] Delimiter: '{'
[13] Identifier: game_state
[13] Operator: =
[13] Literal int: 1
[13] Special symbol: ';'
[14] Delimiter: '}'
[15] Delimiter: '}'
[17] Keyword: void
[17] Identifier: render_menu
[17] Delimiter: '('
[17] Delimiter: ')'
[17] Delimiter: '{'
[19] Identifier: clear_screen
[19] Delimiter: '('
[19] Literal int: -16777216
[19] Delimiter: ')'
[19] Special symbol: ';'
[22] Identifier: select_texture
[22] Delimiter: '('
[22] Operator: -
[22] Literal int: 1
[22] Delimiter: ')'
[22] Special symbol: ';'
[23] Identifier: set_multiply_color
[23] Delimiter: '('
[23] Literal int: -1
[23] Delimiter: ')'
[23] Special symbol: ';'
[26] Identifier: print_at
[26] Delimiter: '('
[26] Delimiter: '('
[26] Literal int: 640
[26] Operator: /
[26] Literal int: 2
[26] Delimiter: ')'
[26] Operator: -
[26] Literal int: 60
[26] Special symbol: ','
[26] Delimiter: '('
[26] Literal int: 360
[26] Operator: /
[26] Literal int: 2
[26] Delimiter: ')'
[26] Operator: -
[26] Literal int: 40
[26] Special symbol: ','
[26] Literal string: "OCEAN STORM"
[26] Delimiter: ')'
[26] Special symbol: ';'
[29] Keyword: if
[29] Delimiter: '('
[29] Delimiter: '('
[29] Identifier: get_frame_counter
[29] Delimiter: '('
[29] Delimiter: ')'
[29] Operator: /
[29] Literal int: 30
[29] Delimiter: ')'
[29] Operator: %
[29] Literal int: 2
[29] Operator: ==
[29] Literal int: 0
[29] Delimiter: ')'
[29] Delimiter: '{'
[30] Identifier: print_at
[30] Delimiter: '('
[30] Delimiter: '('
[30] Literal int: 640
[30] Operator: /
[30] Literal int: 2
[30] Delimiter: ')'
[30] Operator: -
[30] Literal int: 90
[30] Special symbol: ','
[30] Delimiter: '('
[30] Literal int: 360
[30] Operator: /
[30] Literal int: 2
[30] Delimiter: ')'
[30] Operator: +
[30] Literal int: 20
[30] Special symbol: ','
[30] Literal string: "PRESS START TO BEGIN"
[30] Delimiter: ')'
[30] Special symbol: ';'
[31] Delimiter: '}'
[32] Delimiter: '}'

File src\\utils/utilities.c:

[3] Keyword: float
[3] Identifier: clamp
[3] Delimiter: '('
[3] Keyword: float
[3] Identifier: value
[3] Special symbol: ','
[3] Keyword: float
[3] Identifier: min_value
[3] Special symbol: ','
[3] Keyword: float
[3] Identifier: max_value
[3] Delimiter: ')'
[3] Delimiter: '{'
[4] Keyword: if
[4] Delimiter: '('
[4] Identifier: value
[4] Operator: <
[4] Identifier: min_value
[4] Delimiter: ')'
[4] Keyword: return
[4] Identifier: min_value
[4] Special symbol: ';'
[5] Keyword: if
[5] Delimiter: '('
[5] Identifier: value
[5] Operator: >
[5] Identifier: max_value
[5] Delimiter: ')'
[5] Keyword: return
[5] Identifier: max_value
[5] Special symbol: ';'
[6] Keyword: return
[6] Identifier: value
[6] Special symbol: ';'
[7] Delimiter: '}'

File src\\states/gameover.c:

[8] Keyword: extern
[8] Keyword: int
[8] Identifier: game_state
[8] Special symbol: ';'
[10] Keyword: void
[10] Identifier: update_gameover
[10] Delimiter: '('
[10] Delimiter: ')'
[10] Delimiter: '{'
[12] Keyword: if
[12] Delimiter: '('
[12] Identifier: gamepad_button_start
[12] Delimiter: '('
[12] Delimiter: ')'
[12] Operator: ==
[12] Literal int: 1
[12] Delimiter: ')'
[12] Delimiter: '{'
[13] Identifier: reset_airplane
[13] Delimiter: '('
[13] Delimiter: ')'
[13] Special symbol: ';'
[14] Identifier: game_state
[14] Operator: =
[14] Literal int: 0
[14] Special symbol: ';'
[15] Delimiter: '}'
[16] Delimiter: '}'
[18] Keyword: void
[18] Identifier: render_gameover
[18] Delimiter: '('
[18] Delimiter: ')'
[18] Delimiter: '{'
[20] Identifier: clear_screen
[20] Delimiter: '('
[20] Literal int: -16777216
[20] Delimiter: ')'
[20] Special symbol: ';'
[23] Identifier: select_texture
[23] Delimiter: '('
[23] Operator: -
[23] Literal int: 1
[23] Delimiter: ')'
[23] Special symbol: ';'
[24] Identifier: set_multiply_color
[24] Delimiter: '('
[24] Literal int: -16776961
[24] Delimiter: ')'
[24] Special symbol: ';'
[27] Identifier: print_at
[27] Delimiter: '('
[27] Delimiter: '('
[27] Literal int: 640
[27] Operator: /
[27] Literal int: 2
[27] Delimiter: ')'
[27] Operator: -
[27] Literal int: 45
[27] Special symbol: ','
[27] Delimiter: '('
[27] Literal int: 360
[27] Operator: /
[27] Literal int: 2
[27] Delimiter: ')'
[27] Operator: -
[27] Literal int: 20
[27] Special symbol: ','
[27] Literal string: "GAME OVER"
[27] Delimiter: ')'
[27] Special symbol: ';'
[30] Keyword: if
[30] Delimiter: '('
[30] Delimiter: '('
[30] Identifier: get_frame_counter
[30] Delimiter: '('
[30] Delimiter: ')'
[30] Operator: /
[30] Literal int: 30
[30] Delimiter: ')'
[30] Operator: %
[30] Literal int: 2
[30] Operator: ==
[30] Literal int: 0
[30] Delimiter: ')'
[30] Delimiter: '{'
[31] Identifier: set_multiply_color
[31] Delimiter: '('
[31] Literal int: -1
[31] Delimiter: ')'
[31] Special symbol: ';'
[32] Identifier: print_at
[32] Delimiter: '('
[32] Delimiter: '('
[32] Literal int: 640
[32] Operator: /
[32] Literal int: 2
[32] Delimiter: ')'
[32] Operator: -
[32] Literal int: 90
[32] Special symbol: ','
[32] Delimiter: '('
[32] Literal int: 360
[32] Operator: /
[32] Literal int: 2
[32] Delimiter: ')'
[32] Operator: +
[32] Literal int: 20
[32] Special symbol: ','
[32] Literal string: "PRESS START TO CONTINUE"
[32] Delimiter: ')'
[32] Special symbol: ';'
[33] Delimiter: '}'
[34] Delimiter: '}'

File src/main.c:

[20] Keyword: int
[20] Identifier: game_state
[20] Special symbol: ';'
[22] Keyword: void
[22] Identifier: main
[22] Delimiter: '('
[22] Delimiter: ')'
[22] Delimiter: '{'
[23] Identifier: initialize_carrier
[23] Delimiter: '('
[23] Delimiter: ')'
[23] Special symbol: ';'
[24] Identifier: initialize_islands
[24] Delimiter: '('
[24] Delimiter: ')'
[24] Special symbol: ';'
[25] Identifier: initialize_airplane
[25] Delimiter: '('
[25] Delimiter: ')'
[25] Special symbol: ';'
[26] Identifier: game_state
[26] Operator: =
[26] Literal int: 0
[26] Special symbol: ';'
[29] Keyword: while
[29] Delimiter: '('
[29] Literal bool: true
[29] Delimiter: ')'
[29] Delimiter: '{'
[31] Keyword: switch
[31] Delimiter: '('
[31] Identifier: game_state
[31] Delimiter: ')'
[31] Delimiter: '{'
[32] Keyword: case
[32] Literal int: 0
[32] Special symbol: ':'
[33] Identifier: update_menu
[33] Delimiter: '('
[33] Delimiter: ')'
[33] Special symbol: ';'
[34] Identifier: render_menu
[34] Delimiter: '('
[34] Delimiter: ')'
[34] Special symbol: ';'
[35] Keyword: break
[35] Special symbol: ';'
[37] Keyword: case
[37] Literal int: 1
[37] Special symbol: ':'
[38] Identifier: update_airplane
[38] Delimiter: '('
[38] Delimiter: ')'
[38] Special symbol: ';'
[39] Identifier: render_airplane
[39] Delimiter: '('
[39] Delimiter: ')'
[39] Special symbol: ';'
[40] Keyword: break
[40] Special symbol: ';'
[42] Keyword: case
[42] Literal int: 2
[42] Special symbol: ':'
[43] Identifier: update_gameover
[43] Delimiter: '('
[43] Delimiter: ')'
[43] Special symbol: ';'
[44] Identifier: render_gameover
[44] Delimiter: '('
[44] Delimiter: ')'
[44] Special symbol: ';'
[45] Keyword: break
[45] Special symbol: ';'
[46] Delimiter: '}'
[49] Identifier: end_frame
[49] Delimiter: '('
[49] Delimiter: ')'
[49] Special symbol: ';'
[50] Delimiter: '}'
[51] Delimiter: '}'
[51] [END OF FILE]
