<?xml version="1.0"?>
<program><function name="make_gray" return-type="int"><arguments><argument type="int" name="brightness"/></arguments><body><return><operator name="BitwiseOr"><left><operator name="BitwiseOr"><left><operator name="BitwiseOr"><left>-16777216</left><right><parenthesis><operator name="ShiftLeft"><left>brightness</left><right>16</right></operator></parenthesis></right></operator></left><right><parenthesis><operator name="ShiftLeft"><left>brightness</left><right>8</right></operator></parenthesis></right></operator></left><right>brightness</right></operator></return></body></function><function name="make_color_rgb" return-type="int"><arguments><argument type="int" name="r"/><argument type="int" name="g"/><argument type="int" name="b"/></arguments><body><return><operator name="BitwiseOr"><left><operator name="BitwiseOr"><left><operator name="BitwiseOr"><left>-16777216</left><right><parenthesis><operator name="ShiftLeft"><left>b</left><right>16</right></operator></parenthesis></right></operator></left><right><parenthesis><operator name="ShiftLeft"><left>g</left><right>8</right></operator></parenthesis></right></operator></left><right>r</right></operator></return></body></function><function name="make_color_rgba" return-type="int"><arguments><argument type="int" name="r"/><argument type="int" name="g"/><argument type="int" name="b"/><argument type="int" name="a"/></arguments><body><return><operator name="BitwiseOr"><left><operator name="BitwiseOr"><left><operator name="BitwiseOr"><left><parenthesis><operator name="ShiftLeft"><left>a</left><right>24</right></operator></parenthesis></left><right><parenthesis><operator name="ShiftLeft"><left>b</left><right>16</right></operator></parenthesis></right></operator></left><right><parenthesis><operator name="ShiftLeft"><left>g</left><right>8</right></operator></parenthesis></right></operator></left><right>r</right></operator></return></body></function><function name="get_color_red" return-type="int"><arguments><argument type="int" name="color"/></arguments><body><return><operator name="BitwiseAnd"><left>color</left><right>255</right></operator></return></body></function><function name="get_color_green" return-type="int"><arguments><argument type="int" name="color"/></arguments><body><return><operator name="BitwiseAnd"><left><parenthesis><operator name="ShiftRight"><left>color</left><right>8</right></operator></parenthesis></left><right>255</right></operator></return></body></function><function name="get_color_blue" return-type="int"><arguments><argument type="int" name="color"/></arguments><body><return><operator name="BitwiseAnd"><left><parenthesis><operator name="ShiftRight"><left>color</left><right>16</right></operator></parenthesis></left><right>255</right></operator></return></body></function><function name="get_color_alpha" return-type="int"><arguments><argument type="int" name="color"/></arguments><body><return><operator name="BitwiseAnd"><left><parenthesis><operator name="ShiftRight"><left>color</left><right>24</right></operator></parenthesis></left><right>255</right></operator></return></body></function><function name="select_texture" return-type="void"><arguments><argument type="int" name="texture_id"/></arguments><body><asm-block><line>mov R0, {texture_id}</line><line>out GPU_SelectedTexture, R0</line></asm-block></body></function><function name="get_selected_texture" return-type="int"><arguments></arguments><body><asm-block><line>in R0, GPU_SelectedTexture</line></asm-block></body></function><function name="select_region" return-type="void"><arguments><argument type="int" name="region_id"/></arguments><body><asm-block><line>mov R0, {region_id}</line><line>out GPU_SelectedRegion, R0</line></asm-block></body></function><function name="get_selected_region" return-type="int"><arguments></arguments><body><asm-block><line>in R0, GPU_SelectedRegion</line></asm-block></body></function><function name="define_region" return-type="void"><arguments><argument type="int" name="min_x"/><argument type="int" name="min_y"/><argument type="int" name="max_x"/><argument type="int" name="max_y"/><argument type="int" name="hotspot_x"/><argument type="int" name="hotspot_y"/></arguments><body><asm-block><line>mov R0, {min_x}</line><line>out GPU_RegionMinX, R0</line><line>mov R0, {min_y}</line><line>out GPU_RegionMinY, R0</line><line>mov R0, {max_x}</line><line>out GPU_RegionMaxX, R0</line><line>mov R0, {max_y}</line><line>out GPU_RegionMaxY, R0</line><line>mov R0, {hotspot_x}</line><line>out GPU_RegionHotSpotX, R0</line><line>mov R0, {hotspot_y}</line><line>out GPU_RegionHotSpotY, R0</line></asm-block></body></function><function name="define_region_topleft" return-type="void"><arguments><argument type="int" name="min_x"/><argument type="int" name="min_y"/><argument type="int" name="max_x"/><argument type="int" name="max_y"/></arguments><body><asm-block><line>mov R0, {min_x}</line><line>out GPU_RegionMinX, R0</line><line>out GPU_RegionHotSpotX, R0</line><line>mov R0, {min_y}</line><line>out GPU_RegionMinY, R0</line><line>out GPU_RegionHotSpotY, R0</line><line>mov R0, {max_x}</line><line>out GPU_RegionMaxX, R0</line><line>mov R0, {max_y}</line><line>out GPU_RegionMaxY, R0</line></asm-block></body></function><function name="define_region_center" return-type="void"><arguments><argument type="int" name="min_x"/><argument type="int" name="min_y"/><argument type="int" name="max_x"/><argument type="int" name="max_y"/></arguments><body><variable-list><variable type="int" name="center_x"><operator name="Division"><left><parenthesis><operator name="Addition"><left>min_x</left><right>max_x</right></operator></parenthesis></left><right>2</right></operator></variable></variable-list><variable-list><variable type="int" name="center_y"><operator name="Division"><left><parenthesis><operator name="Addition"><left>min_y</left><right>max_y</right></operator></parenthesis></left><right>2</right></operator></variable></variable-list><asm-block><line>mov R0, {min_x}</line><line>out GPU_RegionMinX, R0</line><line>mov R0, {min_y}</line><line>out GPU_RegionMinY, R0</line><line>mov R0, {max_x}</line><line>out GPU_RegionMaxX, R0</line><line>mov R0, {max_y}</line><line>out GPU_RegionMaxY, R0</line><line>mov R0, {center_x}</line><line>out GPU_RegionHotSpotX, R0</line><line>mov R0, {center_y}</line><line>out GPU_RegionHotSpotY, R0</line></asm-block></body></function><function name="define_region_matrix" return-type="void"><arguments><argument type="int" name="first_id"/><argument type="int" name="first_min_x"/><argument type="int" name="first_min_y"/><argument type="int" name="first_max_x"/><argument type="int" name="first_max_y"/><argument type="int" name="first_hotspot_x"/><argument type="int" name="first_hotspot_y"/><argument type="int" name="elements_x"/><argument type="int" name="elements_y"/><argument type="int" name="gap"/></arguments><body><variable-list><variable type="int" name="current_id">first_id</variable></variable-list><variable-list><variable type="int" name="min_x">first_min_x</variable></variable-list><variable-list><variable type="int" name="min_y">first_min_y</variable></variable-list><variable-list><variable type="int" name="max_x">first_max_x</variable></variable-list><variable-list><variable type="int" name="max_y">first_max_y</variable></variable-list><variable-list><variable type="int" name="hotspot_x">first_hotspot_x</variable></variable-list><variable-list><variable type="int" name="hotspot_y">first_hotspot_y</variable></variable-list><variable-list><variable type="int" name="advance_x"><operator name="Addition"><left><parenthesis><operator name="Addition"><left><operator name="Subtraction"><left>max_x</left><right>min_x</right></operator></left><right>1</right></operator></parenthesis></left><right>gap</right></operator></variable></variable-list><variable-list><variable type="int" name="advance_y"><operator name="Addition"><left><parenthesis><operator name="Addition"><left><operator name="Subtraction"><left>max_y</left><right>min_y</right></operator></left><right>1</right></operator></parenthesis></left><right>gap</right></operator></variable></variable-list><for><initial-action><variable-list><variable type="int" name="matrix_y">0</variable></variable-list></initial-action><condition><operator name="LessThan"><left>matrix_y</left><right>elements_y</right></operator></condition><iteration-action><operator name="PreIncrement">matrix_y</operator></iteration-action><loop><block><for><initial-action><variable-list><variable type="int" name="matrix_x">0</variable></variable-list></initial-action><condition><operator name="LessThan"><left>matrix_x</left><right>elements_x</right></operator></condition><iteration-action><operator name="PreIncrement">matrix_x</operator></iteration-action><loop><block><call function="select_region"><parameter>current_id</parameter></call><call function="define_region"><parameter>min_x</parameter><parameter>min_y</parameter><parameter>max_x</parameter><parameter>max_y</parameter><parameter>hotspot_x</parameter><parameter>hotspot_y</parameter></call><operator name="PostIncrement">current_id</operator><operator name="AdditionAssignment"><left>min_x</left><right>advance_x</right></operator><operator name="AdditionAssignment"><left>max_x</left><right>advance_x</right></operator><operator name="AdditionAssignment"><left>hotspot_x</left><right>advance_x</right></operator></block></loop></for><operator name="AdditionAssignment"><left>min_y</left><right>advance_y</right></operator><operator name="AdditionAssignment"><left>max_y</left><right>advance_y</right></operator><operator name="AdditionAssignment"><left>hotspot_y</left><right>advance_y</right></operator><operator name="Assignment"><left>min_x</left><right>first_min_x</right></operator><operator name="Assignment"><left>max_x</left><right>first_max_x</right></operator><operator name="Assignment"><left>hotspot_x</left><right>first_hotspot_x</right></operator></block></loop></for></body></function><function name="set_region_hotspot" return-type="void"><arguments><argument type="int" name="hotspot_x"/><argument type="int" name="hotspot_y"/></arguments><body><asm-block><line>mov R0, {hotspot_x}</line><line>out GPU_RegionHotSpotX, R0</line><line>mov R0, {hotspot_y}</line><line>out GPU_RegionHotSpotY, R0</line></asm-block></body></function><function name="set_multiply_color" return-type="void"><arguments><argument type="int" name="color"/></arguments><body><asm-block><line>mov R0, {color}</line><line>out GPU_MultiplyColor, R0</line></asm-block></body></function><function name="set_drawing_point" return-type="void"><arguments><argument type="int" name="drawing_x"/><argument type="int" name="drawing_y"/></arguments><body><asm-block><line>mov R0, {drawing_x}</line><line>out GPU_DrawingPointX, R0</line><line>mov R0, {drawing_y}</line><line>out GPU_DrawingPointY, R0</line></asm-block></body></function><function name="set_drawing_scale" return-type="void"><arguments><argument type="float" name="scale_x"/><argument type="float" name="scale_y"/></arguments><body><asm-block><line>mov R0, {scale_x}</line><line>out GPU_DrawingScaleX, R0</line><line>mov R0, {scale_y}</line><line>out GPU_DrawingScaleY, R0</line></asm-block></body></function><function name="set_drawing_angle" return-type="void"><arguments><argument type="float" name="angle"/></arguments><body><asm-block><line>mov R0, {angle}</line><line>out GPU_DrawingAngle, R0</line></asm-block></body></function><function name="set_blending_mode" return-type="void"><arguments><argument type="int" name="mode"/></arguments><body><asm-block><line>mov R0, {mode}</line><line>out GPU_ActiveBlending, R0</line></asm-block></body></function><function name="get_multiply_color" return-type="int"><arguments></arguments><body><asm-block><line>in R0, GPU_MultiplyColor</line></asm-block></body></function><function name="get_drawing_point" return-type="void"><arguments><argument type="int*" name="drawing_x"/><argument type="int*" name="drawing_y"/></arguments><body><asm-block><line>push R1</line><line>in R0, GPU_DrawingPointX</line><line>mov R1, {drawing_x}</line><line>mov [R1], R0</line><line>in R0, GPU_DrawingPointY</line><line>mov R1, {drawing_y}</line><line>mov [R1], R0</line></asm-block></body></function><function name="get_drawing_scale" return-type="void"><arguments><argument type="float*" name="scale_x"/><argument type="float*" name="scale_y"/></arguments><body><asm-block><line>push R1</line><line>in R0, GPU_DrawingScaleX</line><line>mov R1, {scale_x}</line><line>mov [R1], R0</line><line>in R0, GPU_DrawingScaleY</line><line>mov R1, {scale_y}</line><line>mov [R1], R0</line></asm-block></body></function><function name="get_drawing_angle" return-type="float"><arguments></arguments><body><asm-block><line>in R0, GPU_DrawingAngle</line></asm-block></body></function><function name="get_blending_mode" return-type="int"><arguments></arguments><body><asm-block><line>in R0, GPU_ActiveBlending</line></asm-block></body></function><function name="clear_screen" return-type="void"><arguments><argument type="int" name="color"/></arguments><body><asm-block><line>mov R0, {color}</line><line>out GPU_ClearColor, R0</line><line>out GPU_Command, GPUCommand_ClearScreen</line></asm-block></body></function><function name="draw_region" return-type="void"><arguments></arguments><body><asm-block><line>out GPU_Command, GPUCommand_DrawRegion</line></asm-block></body></function><function name="draw_region_at" return-type="void"><arguments><argument type="int" name="drawing_x"/><argument type="int" name="drawing_y"/></arguments><body><asm-block><line>mov R0, {drawing_x}</line><line>out GPU_DrawingPointX, R0</line><line>mov R0, {drawing_y}</line><line>out GPU_DrawingPointY, R0</line><line>out GPU_Command, GPUCommand_DrawRegion</line></asm-block></body></function><function name="draw_region_zoomed" return-type="void"><arguments></arguments><body><asm-block><line>out GPU_Command, GPUCommand_DrawRegionZoomed</line></asm-block></body></function><function name="draw_region_zoomed_at" return-type="void"><arguments><argument type="int" name="drawing_x"/><argument type="int" name="drawing_y"/></arguments><body><asm-block><line>mov R0, {drawing_x}</line><line>out GPU_DrawingPointX, R0</line><line>mov R0, {drawing_y}</line><line>out GPU_DrawingPointY, R0</line><line>out GPU_Command, GPUCommand_DrawRegionZoomed</line></asm-block></body></function><function name="draw_region_rotated" return-type="void"><arguments></arguments><body><asm-block><line>out GPU_Command, GPUCommand_DrawRegionRotated</line></asm-block></body></function><function name="draw_region_rotated_at" return-type="void"><arguments><argument type="int" name="drawing_x"/><argument type="int" name="drawing_y"/></arguments><body><asm-block><line>mov R0, {drawing_x}</line><line>out GPU_DrawingPointX, R0</line><line>mov R0, {drawing_y}</line><line>out GPU_DrawingPointY, R0</line><line>out GPU_Command, GPUCommand_DrawRegionRotated</line></asm-block></body></function><function name="draw_region_rotozoomed" return-type="void"><arguments></arguments><body><asm-block><line>out GPU_Command, GPUCommand_DrawRegionRotozoomed</line></asm-block></body></function><function name="draw_region_rotozoomed_at" return-type="void"><arguments><argument type="int" name="drawing_x"/><argument type="int" name="drawing_y"/></arguments><body><asm-block><line>mov R0, {drawing_x}</line><line>out GPU_DrawingPointX, R0</line><line>mov R0, {drawing_y}</line><line>out GPU_DrawingPointY, R0</line><line>out GPU_Command, GPUCommand_DrawRegionRotozoomed</line></asm-block></body></function><function name="print_at" return-type="void"><arguments><argument type="int" name="drawing_x"/><argument type="int" name="drawing_y"/><argument type="int*" name="text"/></arguments><body><variable-list><variable type="int" name="previous_texture"><call function="get_selected_texture"></call></variable></variable-list><call function="select_texture"><parameter><operator name="MinusSign">1</operator></parameter></call><variable-list><variable type="int" name="initial_drawing_x">drawing_x</variable></variable-list><while><condition><operator name="Dereference">text</operator></condition><loop><block><call function="select_region"><parameter><operator name="Dereference">text</operator></parameter></call><call function="draw_region_at"><parameter>drawing_x</parameter><parameter>drawing_y</parameter></call><operator name="AdditionAssignment"><left>drawing_x</left><right>10</right></operator><if><condition><operator name="Equal"><left><operator name="Dereference">text</operator></left><right>10</right></operator></condition><on-true><block><operator name="Assignment"><left>drawing_x</left><right>initial_drawing_x</right></operator><operator name="AdditionAssignment"><left>drawing_y</left><right>20</right></operator></block></on-true></if><operator name="PreIncrement">text</operator></block></loop></while><call function="select_texture"><parameter>previous_texture</parameter></call></body></function><function name="print" return-type="void"><arguments><argument type="int*" name="text"/></arguments><body><variable-list><variable type="int" name="drawing_x"></variable><variable type="int" name="drawing_y"></variable></variable-list><call function="get_drawing_point"><parameter><operator name="Reference">drawing_x</operator></parameter><parameter><operator name="Reference">drawing_y</operator></parameter></call><call function="print_at"><parameter>drawing_x</parameter><parameter>drawing_y</parameter><parameter>text</parameter></call></body></function><function name="select_gamepad" return-type="void"><arguments><argument type="int" name="gamepad_id"/></arguments><body><asm-block><line>mov R0, {gamepad_id}</line><line>out INP_SelectedGamepad, R0</line></asm-block></body></function><function name="get_selected_gamepad" return-type="int"><arguments></arguments><body><asm-block><line>in R0, INP_SelectedGamepad</line></asm-block></body></function><function name="gamepad_is_connected" return-type="bool"><arguments></arguments><body><asm-block><line>in R0, INP_GamepadConnected</line></asm-block></body></function><function name="gamepad_left" return-type="int"><arguments></arguments><body><asm-block><line>in R0, INP_GamepadLeft</line></asm-block></body></function><function name="gamepad_right" return-type="int"><arguments></arguments><body><asm-block><line>in R0, INP_GamepadRight</line></asm-block></body></function><function name="gamepad_up" return-type="int"><arguments></arguments><body><asm-block><line>in R0, INP_GamepadUp</line></asm-block></body></function><function name="gamepad_down" return-type="int"><arguments></arguments><body><asm-block><line>in R0, INP_GamepadDown</line></asm-block></body></function><function name="gamepad_direction" return-type="void"><arguments><argument type="int*" name="delta_x"/><argument type="int*" name="delta_y"/></arguments><body><if><condition><operator name="GreaterThan"><left><call function="gamepad_left"></call></left><right>0</right></operator></condition><on-true><operator name="Assignment"><left><operator name="Dereference">delta_x</operator></left><right><operator name="MinusSign">1</operator></right></operator></on-true><on-false><if><condition><operator name="GreaterThan"><left><call function="gamepad_right"></call></left><right>0</right></operator></condition><on-true><operator name="Assignment"><left><operator name="Dereference">delta_x</operator></left><right>1</right></operator></on-true><on-false><operator name="Assignment"><left><operator name="Dereference">delta_x</operator></left><right>0</right></operator></on-false></if></on-false></if><if><condition><operator name="GreaterThan"><left><call function="gamepad_up"></call></left><right>0</right></operator></condition><on-true><operator name="Assignment"><left><operator name="Dereference">delta_y</operator></left><right><operator name="MinusSign">1</operator></right></operator></on-true><on-false><if><condition><operator name="GreaterThan"><left><call function="gamepad_down"></call></left><right>0</right></operator></condition><on-true><operator name="Assignment"><left><operator name="Dereference">delta_y</operator></left><right>1</right></operator></on-true><on-false><operator name="Assignment"><left><operator name="Dereference">delta_y</operator></left><right>0</right></operator></on-false></if></on-false></if></body></function><function name="gamepad_direction_normalized" return-type="void"><arguments><argument type="float*" name="delta_x"/><argument type="float*" name="delta_y"/></arguments><body><if><condition><operator name="GreaterThan"><left><call function="gamepad_left"></call></left><right>0</right></operator></condition><on-true><operator name="Assignment"><left><operator name="Dereference">delta_x</operator></left><right><operator name="MinusSign">1</operator></right></operator></on-true><on-false><if><condition><operator name="GreaterThan"><left><call function="gamepad_right"></call></left><right>0</right></operator></condition><on-true><operator name="Assignment"><left><operator name="Dereference">delta_x</operator></left><right>1</right></operator></on-true><on-false><operator name="Assignment"><left><operator name="Dereference">delta_x</operator></left><right>0</right></operator></on-false></if></on-false></if><if><condition><operator name="GreaterThan"><left><call function="gamepad_up"></call></left><right>0</right></operator></condition><on-true><operator name="Assignment"><left><operator name="Dereference">delta_y</operator></left><right><operator name="MinusSign">1</operator></right></operator></on-true><on-false><if><condition><operator name="GreaterThan"><left><call function="gamepad_down"></call></left><right>0</right></operator></condition><on-true><operator name="Assignment"><left><operator name="Dereference">delta_y</operator></left><right>1</right></operator></on-true><on-false><operator name="Assignment"><left><operator name="Dereference">delta_y</operator></left><right>0</right></operator></on-false></if></on-false></if><if><condition><operator name="LogicalAnd"><left><operator name="Dereference">delta_x</operator></left><right><operator name="Dereference">delta_y</operator></right></operator></condition><on-true><block><operator name="ProductAssignment"><left><operator name="Dereference">delta_x</operator></left><right>0.707107</right></operator><operator name="ProductAssignment"><left><operator name="Dereference">delta_y</operator></left><right>0.707107</right></operator></block></on-true></if></body></function><function name="gamepad_button_a" return-type="int"><arguments></arguments><body><asm-block><line>in R0, INP_GamepadButtonA</line></asm-block></body></function><function name="gamepad_button_b" return-type="int"><arguments></arguments><body><asm-block><line>in R0, INP_GamepadButtonB</line></asm-block></body></function><function name="gamepad_button_x" return-type="int"><arguments></arguments><body><asm-block><line>in R0, INP_GamepadButtonX</line></asm-block></body></function><function name="gamepad_button_y" return-type="int"><arguments></arguments><body><asm-block><line>in R0, INP_GamepadButtonY</line></asm-block></body></function><function name="gamepad_button_l" return-type="int"><arguments></arguments><body><asm-block><line>in R0, INP_GamepadButtonL</line></asm-block></body></function><function name="gamepad_button_r" return-type="int"><arguments></arguments><body><asm-block><line>in R0, INP_GamepadButtonR</line></asm-block></body></function><function name="gamepad_button_start" return-type="int"><arguments></arguments><body><asm-block><line>in R0, INP_GamepadButtonStart</line></asm-block></body></function><function name="get_cycle_counter" return-type="int"><arguments></arguments><body><asm-block><line>in R0, TIM_CycleCounter</line></asm-block></body></function><function name="get_frame_counter" return-type="int"><arguments></arguments><body><asm-block><line>in R0, TIM_FrameCounter</line></asm-block></body></function><function name="get_date" return-type="int"><arguments></arguments><body><asm-block><line>in R0, TIM_CurrentDate</line></asm-block></body></function><function name="get_time" return-type="int"><arguments></arguments><body><asm-block><line>in R0, TIM_CurrentTime</line></asm-block></body></function><structure name="date_info"><member-list><member type="int" name="year"></member></member-list><member-list><member type="int" name="month"></member></member-list><member-list><member type="int" name="day"></member></member-list></structure><function name="translate_date" return-type="void"><arguments><argument type="int" name="date"/><argument type="struct date_info*" name="translated"/></arguments><body><operator name="Assignment"><left><pointed-member-access><group>translated</group><member>year</member></pointed-member-access></left><right><operator name="ShiftRight"><left>date</left><right>16</right></operator></right></operator><variable-list><variable type="int" name="days_in_year"><operator name="BitwiseAnd"><left>date</left><right>65535</right></operator></variable></variable-list><variable-list><variable type="int[12]" name="month_days"><initialization-list><value>31</value><value>28</value><value>31</value><value>30</value><value>31</value><value>30</value><value>31</value><value>31</value><value>30</value><value>31</value><value>30</value><value>31</value></initialization-list></variable></variable-list><variable-list><variable type="bool" name="is_leap_year"><operator name="LogicalAnd"><left><parenthesis><operator name="Equal"><left><parenthesis><operator name="Modulus"><left><pointed-member-access><group>translated</group><member>year</member></pointed-member-access></left><right>4</right></operator></parenthesis></left><right>0</right></operator></parenthesis></left><right><parenthesis><operator name="NotEqual"><left><parenthesis><operator name="Modulus"><left><pointed-member-access><group>translated</group><member>year</member></pointed-member-access></left><right>100</right></operator></parenthesis></left><right>0</right></operator></parenthesis></right></operator></variable></variable-list><if><condition>is_leap_year</condition><on-true><operator name="Assignment"><left><array-access><array>month_days</array><index>1</index></array-access></left><right>29</right></operator></on-true></if><operator name="Assignment"><left><pointed-member-access><group>translated</group><member>month</member></pointed-member-access></left><right>1</right></operator><for><initial-action><variable-list><variable type="int" name="m">0</variable></variable-list></initial-action><condition><operator name="LessThan"><left>m</left><right>11</right></operator></condition><iteration-action><operator name="PreIncrement">m</operator></iteration-action><loop><block><if><condition><operator name="LessThan"><left>days_in_year</left><right><array-access><array>month_days</array><index>m</index></array-access></right></operator></condition><on-true><block><operator name="Assignment"><left><pointed-member-access><group>translated</group><member>day</member></pointed-member-access></left><right><operator name="Addition"><left>days_in_year</left><right>1</right></operator></right></operator><return/></block></on-true></if><operator name="SubtractionAssignment"><left>days_in_year</left><right><array-access><array>month_days</array><index>m</index></array-access></right></operator><operator name="PostIncrement"><pointed-member-access><group>translated</group><member>month</member></pointed-member-access></operator></block></loop></for><operator name="Assignment"><left><pointed-member-access><group>translated</group><member>month</member></pointed-member-access></left><right>12</right></operator><operator name="Assignment"><left><pointed-member-access><group>translated</group><member>day</member></pointed-member-access></left><right><operator name="Addition"><left>days_in_year</left><right>1</right></operator></right></operator></body></function><structure name="time_info"><member-list><member type="int" name="hours"></member></member-list><member-list><member type="int" name="minutes"></member></member-list><member-list><member type="int" name="seconds"></member></member-list></structure><function name="translate_time" return-type="void"><arguments><argument type="int" name="time"/><argument type="struct time_info*" name="translated"/></arguments><body><operator name="Assignment"><left><pointed-member-access><group>translated</group><member>hours</member></pointed-member-access></left><right><operator name="Division"><left>time</left><right>3600</right></operator></right></operator><operator name="Assignment"><left><pointed-member-access><group>translated</group><member>minutes</member></pointed-member-access></left><right><operator name="Division"><left><parenthesis><operator name="Modulus"><left>time</left><right>3600</right></operator></parenthesis></left><right>60</right></operator></right></operator><operator name="Assignment"><left><pointed-member-access><group>translated</group><member>seconds</member></pointed-member-access></left><right><operator name="Modulus"><left>time</left><right>60</right></operator></right></operator></body></function><function name="end_frame" return-type="void"><arguments></arguments><body><asm-block><line>wait</line></asm-block></body></function><function name="sleep" return-type="void"><arguments><argument type="int" name="frames"/></arguments><body><variable-list><variable type="int" name="initial_frames"><call function="get_frame_counter"></call></variable></variable-list><variable-list><variable type="int" name="final_frames"><operator name="Addition"><left>initial_frames</left><right>frames</right></operator></variable></variable-list><while><condition><operator name="LessThan"><left><call function="get_frame_counter"></call></left><right>final_frames</right></operator></condition><loop><call function="end_frame"></call></loop></while></body></function><variable-list><variable type="float" name="airplane_x" extern="true"></variable></variable-list><variable-list><variable type="float" name="airplane_y" extern="true"></variable></variable-list><variable-list><variable type="float" name="airplane_angle" extern="true"></variable></variable-list><variable-list><variable type="float" name="airplane_scale" extern="true"></variable></variable-list><variable-list><variable type="float" name="airplane_velocity" extern="true"></variable></variable-list><function name="initialize_airplane" return-type="void"><arguments></arguments><body></body></function><function name="reset_airplane" return-type="void"><arguments></arguments><body></body></function><function name="update_airplane" return-type="void"><arguments></arguments><body></body></function><function name="render_airplane" return-type="void"><arguments></arguments><body></body></function><function name="update_menu" return-type="void"><arguments></arguments><body></body></function><function name="render_menu" return-type="void"><arguments></arguments><body></body></function><function name="update_gameover" return-type="void"><arguments></arguments><body></body></function><function name="render_gameover" return-type="void"><arguments></arguments><body></body></function><function name="clamp" return-type="float"><arguments><argument type="float" name="value"/><argument type="float" name="min_value"/><argument type="float" name="max_value"/></arguments><body></body></function><function name="fmod" return-type="float"><arguments><argument type="float" name="x"/><argument type="float" name="y"/></arguments><body><asm-block><line>push R1</line><line>mov R0, {x}</line><line>mov R1, {y}</line><line>fmod R0, R1</line><line>pop R1</line></asm-block></body></function><function name="min" return-type="int"><arguments><argument type="int" name="a"/><argument type="int" name="b"/></arguments><body><asm-block><line>push R1</line><line>mov R0, {a}</line><line>mov R1, {b}</line><line>imin R0, R1</line><line>pop R1</line></asm-block></body></function><function name="max" return-type="int"><arguments><argument type="int" name="a"/><argument type="int" name="b"/></arguments><body><asm-block><line>push R1</line><line>mov R0, {a}</line><line>mov R1, {b}</line><line>imax R0, R1</line><line>pop R1</line></asm-block></body></function><function name="abs" return-type="int"><arguments><argument type="int" name="a"/></arguments><body><asm-block><line>mov R0, {a}</line><line>iabs R0</line></asm-block></body></function><function name="fmin" return-type="float"><arguments><argument type="float" name="x"/><argument type="float" name="y"/></arguments><body><asm-block><line>push R1</line><line>mov R0, {x}</line><line>mov R1, {y}</line><line>fmin R0, R1</line><line>pop R1</line></asm-block></body></function><function name="fmax" return-type="float"><arguments><argument type="float" name="x"/><argument type="float" name="y"/></arguments><body><asm-block><line>push R1</line><line>mov R0, {x}</line><line>mov R1, {y}</line><line>fmax R0, R1</line><line>pop R1</line></asm-block></body></function><function name="fabs" return-type="float"><arguments><argument type="float" name="x"/></arguments><body><asm-block><line>mov R0, {x}</line><line>fabs R0</line></asm-block></body></function><function name="floor" return-type="float"><arguments><argument type="float" name="x"/></arguments><body><asm-block><line>mov R0, {x}</line><line>flr R0</line></asm-block></body></function><function name="ceil" return-type="float"><arguments><argument type="float" name="x"/></arguments><body><asm-block><line>mov R0, {x}</line><line>ceil R0</line></asm-block></body></function><function name="round" return-type="float"><arguments><argument type="float" name="x"/></arguments><body><asm-block><line>mov R0, {x}</line><line>round R0</line></asm-block></body></function><function name="sin" return-type="float"><arguments><argument type="float" name="angle"/></arguments><body><asm-block><line>mov R0, {angle}</line><line>sin R0</line></asm-block></body></function><function name="cos" return-type="float"><arguments><argument type="float" name="angle"/></arguments><body><asm-block><line>mov R0, {angle}</line><line>fadd R0, 1.570796</line><line>sin R0</line></asm-block></body></function><function name="tan" return-type="float"><arguments><argument type="float" name="angle"/></arguments><body><asm-block><line>push R1</line><line>mov R1, {angle}</line><line>mov R0, R1</line><line>sin R0</line><line>fadd R1, 1.570796</line><line>sin R1</line><line>fdiv R0, R1</line><line>pop R1</line></asm-block></body></function><function name="asin" return-type="float"><arguments><argument type="float" name="x"/></arguments><body><asm-block><line>mov R0, {x}</line><line>acos R0</line><line>fsgn R0</line><line>fadd R0, 1.570796</line></asm-block></body></function><function name="acos" return-type="float"><arguments><argument type="float" name="x"/></arguments><body><asm-block><line>mov R0, {x}</line><line>acos R0</line></asm-block></body></function><function name="atan2" return-type="float"><arguments><argument type="float" name="x"/><argument type="float" name="y"/></arguments><body><asm-block><line>push R1</line><line>mov R0, {x}</line><line>mov R1, {y}</line><line>atan2 R0, R1</line><line>pop R1</line></asm-block></body></function><function name="sqrt" return-type="float"><arguments><argument type="float" name="x"/></arguments><body><asm-block><line>push R1</line><line>mov R0, {x}</line><line>mov R1, 0.5</line><line>pow R0, R1</line><line>pop R1</line></asm-block></body></function><function name="pow" return-type="float"><arguments><argument type="float" name="x"/><argument type="float" name="y"/></arguments><body><asm-block><line>push R1</line><line>mov R0, {x}</line><line>mov R1, {y}</line><line>pow R0, R1</line><line>pop R1</line></asm-block></body></function><function name="exp" return-type="float"><arguments><argument type="float" name="x"/></arguments><body><asm-block><line>push R1</line><line>mov R0, 2.718282</line><line>mov R1, {x}</line><line>pow R0, R1</line><line>pop R1</line></asm-block></body></function><function name="log" return-type="float"><arguments><argument type="float" name="x"/></arguments><body><asm-block><line>mov R0, {x}</line><line>log R0</line></asm-block></body></function><variable-list><variable type="float" name="airplane_x"></variable></variable-list><variable-list><variable type="float" name="airplane_y"></variable></variable-list><variable-list><variable type="float" name="camera_x"></variable></variable-list><variable-list><variable type="float" name="camera_y"></variable></variable-list><variable-list><variable type="float" name="airplane_angle"></variable></variable-list><variable-list><variable type="float" name="airplane_scale"></variable></variable-list><variable-list><variable type="float" name="airplane_velocity"></variable></variable-list><variable-list><variable type="int" name="game_state" extern="true"></variable></variable-list><function name="is_over_carrier" return-type="int"><arguments></arguments><body><if><condition><operator name="LogicalAnd"><left><operator name="LogicalAnd"><left><operator name="LogicalAnd"><left><operator name="GreaterOrEqual"><left>airplane_x</left><right><operator name="Subtraction"><left>400</left><right>50</right></operator></right></operator></left><right><operator name="LessOrEqual"><left>airplane_x</left><right><operator name="Addition"><left>400</left><right>50</right></operator></right></operator></right></operator></left><right><operator name="GreaterOrEqual"><left>airplane_y</left><right><operator name="Subtraction"><left>300</left><right>50</right></operator></right></operator></right></operator></left><right><operator name="LessOrEqual"><left>airplane_y</left><right><operator name="Addition"><left>300</left><right>50</right></operator></right></operator></right></operator></condition><on-true><block><return>1</return></block></on-true></if><return>0</return></body></function><function name="reset_airplane" return-type="void"><arguments></arguments><body><operator name="Assignment"><left>airplane_x</left><right><operator name="Division"><left>2000</left><right>2</right></operator></right></operator><operator name="Assignment"><left>airplane_y</left><right><operator name="Division"><left>2000</left><right>2</right></operator></right></operator><operator name="Assignment"><left>camera_x</left><right><operator name="Subtraction"><left>airplane_x</left><right><parenthesis><operator name="Division"><left>640</left><right>2</right></operator></parenthesis></right></operator></right></operator><operator name="Assignment"><left>camera_y</left><right><operator name="Subtraction"><left>airplane_y</left><right><parenthesis><operator name="Division"><left>360</left><right>2</right></operator></parenthesis></right></operator></right></operator><operator name="Assignment"><left>airplane_angle</left><right>0.000000</right></operator><operator name="Assignment"><left>airplane_scale</left><right>1.000000</right></operator><operator name="Assignment"><left>airplane_velocity</left><right>0.000000</right></operator></body></function><function name="initialize_airplane" return-type="void"><arguments></arguments><body><call function="select_texture"><parameter>0</parameter></call><call function="select_region"><parameter>0</parameter></call><call function="define_region"><parameter>0</parameter><parameter>0</parameter><parameter>64</parameter><parameter>64</parameter><parameter>32</parameter><parameter>32</parameter></call><call function="select_region"><parameter>1</parameter></call><call function="define_region"><parameter>0</parameter><parameter>0</parameter><parameter>64</parameter><parameter>64</parameter><parameter>32</parameter><parameter>32</parameter></call><call function="select_region"><parameter>2</parameter></call><call function="define_region"><parameter>64</parameter><parameter>0</parameter><parameter>164</parameter><parameter>32</parameter><parameter>82</parameter><parameter>16</parameter></call><call function="reset_airplane"></call></body></function><function name="update_camera" return-type="void"><arguments></arguments><body><operator name="Assignment"><left>camera_x</left><right><operator name="Subtraction"><left>airplane_x</left><right><parenthesis><operator name="Division"><left>640</left><right>2</right></operator></parenthesis></right></operator></right></operator><operator name="Assignment"><left>camera_y</left><right><operator name="Subtraction"><left>airplane_y</left><right><parenthesis><operator name="Division"><left>360</left><right>2</right></operator></parenthesis></right></operator></right></operator></body></function><function name="update_airplane" return-type="void"><arguments></arguments><body><variable-list><variable type="int" name="direction_x"></variable><variable type="int" name="direction_y"></variable></variable-list><call function="gamepad_direction"><parameter><operator name="Reference">direction_x</operator></parameter><parameter><operator name="Reference">direction_y</operator></parameter></call><if><condition><operator name="GreaterThan"><left><call function="gamepad_left"></call></left><right>0</right></operator></condition><on-true><operator name="SubtractionAssignment"><left>airplane_angle</left><right>0.050000</right></operator></on-true></if><if><condition><operator name="GreaterThan"><left><call function="gamepad_right"></call></left><right>0</right></operator></condition><on-true><operator name="AdditionAssignment"><left>airplane_angle</left><right>0.050000</right></operator></on-true></if><if><condition><operator name="GreaterThan"><left><call function="gamepad_up"></call></left><right>0</right></operator></condition><on-true><block><operator name="AdditionAssignment"><left>airplane_x</left><right><operator name="Product"><left>3.000000</left><right><call function="sin"><parameter>airplane_angle</parameter></call></right></operator></right></operator><operator name="SubtractionAssignment"><left>airplane_y</left><right><operator name="Product"><left>3.000000</left><right><call function="cos"><parameter>airplane_angle</parameter></call></right></operator></right></operator><operator name="Assignment"><left>airplane_scale</left><right><call function="clamp"><parameter><operator name="Addition"><left>airplane_scale</left><right>0.010000</right></operator></parameter><parameter>0.200000</parameter><parameter>1.000000</parameter></call></right></operator></block></on-true><on-false><block><operator name="Assignment"><left>airplane_scale</left><right><call function="clamp"><parameter><operator name="Subtraction"><left>airplane_scale</left><right>0.010000</right></operator></parameter><parameter>0.200000</parameter><parameter>1.000000</parameter></call></right></operator><if><condition><operator name="LessOrEqual"><left>airplane_scale</left><right>0.200000</right></operator></condition><on-true><block><if><condition><call function="is_over_carrier"></call></condition><on-true><block><operator name="Assignment"><left>airplane_scale</left><right>0.200000</right></operator></block></on-true><on-false><block><operator name="Assignment"><left>game_state</left><right>2</right></operator></block></on-false></if></block></on-true></if></block></on-false></if><operator name="Assignment"><left>airplane_x</left><right><call function="clamp"><parameter>airplane_x</parameter><parameter>0</parameter><parameter>2000</parameter></call></right></operator><operator name="Assignment"><left>airplane_y</left><right><call function="clamp"><parameter>airplane_y</parameter><parameter>0</parameter><parameter>2000</parameter></call></right></operator><call function="update_camera"></call></body></function><function name="render_sea" return-type="void"><arguments></arguments><body><call function="clear_screen"><parameter>-8368096</parameter></call></body></function><function name="render_airplane" return-type="void"><arguments></arguments><body><call function="render_sea"></call><call function="select_texture"><parameter>0</parameter></call><call function="select_region"><parameter>2</parameter></call><call function="draw_region_at"><parameter><operator name="Subtraction"><left>400</left><right>camera_x</right></operator></parameter><parameter><operator name="Subtraction"><left>300</left><right>camera_y</right></operator></parameter></call><variable-list><variable type="float" name="screen_x"><operator name="Subtraction"><left>airplane_x</left><right>camera_x</right></operator></variable></variable-list><variable-list><variable type="float" name="screen_y"><operator name="Subtraction"><left>airplane_y</left><right>camera_y</right></operator></variable></variable-list><call function="select_region"><parameter>1</parameter></call><call function="set_multiply_color"><parameter>-2147483648</parameter></call><call function="set_drawing_scale"><parameter>airplane_scale</parameter><parameter>airplane_scale</parameter></call><call function="set_drawing_angle"><parameter>airplane_angle</parameter></call><call function="draw_region_rotozoomed_at"><parameter><operator name="Addition"><left>screen_x</left><right>10</right></operator></parameter><parameter><operator name="Addition"><left>screen_y</left><right>10</right></operator></parameter></call><call function="set_multiply_color"><parameter>-1</parameter></call><call function="select_region"><parameter>0</parameter></call><call function="set_drawing_scale"><parameter>airplane_scale</parameter><parameter>airplane_scale</parameter></call><call function="set_drawing_angle"><parameter>airplane_angle</parameter></call><call function="draw_region_rotozoomed_at"><parameter>screen_x</parameter><parameter>screen_y</parameter></call></body></function><variable-list><variable type="int" name="game_state" extern="true"></variable></variable-list><function name="update_menu" return-type="void"><arguments></arguments><body><if><condition><operator name="Equal"><left><call function="gamepad_button_start"></call></left><right>1</right></operator></condition><on-true><block><operator name="Assignment"><left>game_state</left><right>1</right></operator></block></on-true></if></body></function><function name="render_menu" return-type="void"><arguments></arguments><body><call function="clear_screen"><parameter>-16777216</parameter></call><call function="select_texture"><parameter><operator name="MinusSign">1</operator></parameter></call><call function="set_multiply_color"><parameter>-1</parameter></call><call function="print_at"><parameter><operator name="Subtraction"><left><parenthesis><operator name="Division"><left>640</left><right>2</right></operator></parenthesis></left><right>60</right></operator></parameter><parameter><operator name="Subtraction"><left><parenthesis><operator name="Division"><left>360</left><right>2</right></operator></parenthesis></left><right>40</right></operator></parameter><parameter><literal-string>OCEAN STORM</literal-string></parameter></call><if><condition><operator name="Equal"><left><operator name="Modulus"><left><parenthesis><operator name="Division"><left><call function="get_frame_counter"></call></left><right>30</right></operator></parenthesis></left><right>2</right></operator></left><right>0</right></operator></condition><on-true><block><call function="print_at"><parameter><operator name="Subtraction"><left><parenthesis><operator name="Division"><left>640</left><right>2</right></operator></parenthesis></left><right>90</right></operator></parameter><parameter><operator name="Addition"><left><parenthesis><operator name="Division"><left>360</left><right>2</right></operator></parenthesis></left><right>20</right></operator></parameter><parameter><literal-string>PRESS START TO BEGIN</literal-string></parameter></call></block></on-true></if></body></function><function name="clamp" return-type="float"><arguments><argument type="float" name="value"/><argument type="float" name="min_value"/><argument type="float" name="max_value"/></arguments><body><if><condition><operator name="LessThan"><left>value</left><right>min_value</right></operator></condition><on-true><return>min_value</return></on-true></if><if><condition><operator name="GreaterThan"><left>value</left><right>max_value</right></operator></condition><on-true><return>max_value</return></on-true></if><return>value</return></body></function><variable-list><variable type="int" name="game_state" extern="true"></variable></variable-list><function name="update_gameover" return-type="void"><arguments></arguments><body><if><condition><operator name="Equal"><left><call function="gamepad_button_start"></call></left><right>1</right></operator></condition><on-true><block><call function="reset_airplane"></call><operator name="Assignment"><left>game_state</left><right>0</right></operator></block></on-true></if></body></function><function name="render_gameover" return-type="void"><arguments></arguments><body><call function="clear_screen"><parameter>-16777216</parameter></call><call function="select_texture"><parameter><operator name="MinusSign">1</operator></parameter></call><call function="set_multiply_color"><parameter>-16776961</parameter></call><call function="print_at"><parameter><operator name="Subtraction"><left><parenthesis><operator name="Division"><left>640</left><right>2</right></operator></parenthesis></left><right>45</right></operator></parameter><parameter><operator name="Subtraction"><left><parenthesis><operator name="Division"><left>360</left><right>2</right></operator></parenthesis></left><right>20</right></operator></parameter><parameter><literal-string>GAME OVER</literal-string></parameter></call><if><condition><operator name="Equal"><left><operator name="Modulus"><left><parenthesis><operator name="Division"><left><call function="get_frame_counter"></call></left><right>30</right></operator></parenthesis></left><right>2</right></operator></left><right>0</right></operator></condition><on-true><block><call function="set_multiply_color"><parameter>-1</parameter></call><call function="print_at"><parameter><operator name="Subtraction"><left><parenthesis><operator name="Division"><left>640</left><right>2</right></operator></parenthesis></left><right>90</right></operator></parameter><parameter><operator name="Addition"><left><parenthesis><operator name="Division"><left>360</left><right>2</right></operator></parenthesis></left><right>20</right></operator></parameter><parameter><literal-string>PRESS START TO CONTINUE</literal-string></parameter></call></block></on-true></if></body></function><variable-list><variable type="int" name="game_state"></variable></variable-list><function name="main" return-type="void"><arguments></arguments><body><call function="initialize_airplane"></call><operator name="Assignment"><left>game_state</left><right>0</right></operator><while><condition>true</condition><loop><block><switch><condition>game_state</condition><body><case>0</case><call function="update_menu"></call><call function="render_menu"></call><break/><case>1</case><call function="update_airplane"></call><call function="render_airplane"></call><break/><case>2</case><call function="update_gameover"></call><call function="render_gameover"></call><break/></body></switch><call function="end_frame"></call></block></loop></while></body></function></program>